"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[1186],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=o,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||a;return t?r.createElement(g,i(i({ref:n},c),{},{components:t})):r.createElement(g,i({ref:n},c))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},30715:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=t(87462),o=t(63366),a=(t(67294),t(3905)),i=["components"],l={},s="CNCF OpenTelemetry Jaeger Interworking",p={unversionedId:"recipes/otel_jaeger/README",id:"version-0.11/recipes/otel_jaeger/README",isDocsHomePage:!1,title:"CNCF OpenTelemetry Jaeger Interworking",description:"!! note",source:"@site/versioned_docs/version-0.11/recipes/42_otel_jaeger/README.md",sourceDirName:"recipes/42_otel_jaeger",slug:"/recipes/otel_jaeger/README",permalink:"/docs/recipes/otel_jaeger/README",editUrl:"https://github.com/tremor-rs/tremor-www/tree/main/versioned_docs/version-0.11/recipes/42_otel_jaeger/README.md",tags:[],version:"0.11",frontMatter:{},sidebar:"version-0.11/tutorialSidebar",previous:{title:"CNCF OpenTelemetry Zipkin Interworking",permalink:"/docs/recipes/otel_zipkin/README"},next:{title:"CNCF OpenTelemetry Prometheus Interworking",permalink:"/docs/recipes/otel_prometheus/README"}},c=[{value:"Environment",id:"environment",children:[]},{value:"Business Logic",id:"business-logic",children:[]},{value:"Command line testing during logic development",id:"command-line-testing-during-logic-development",children:[]},{value:"Docker",id:"docker",children:[]},{value:"Jaeger client",id:"jaeger-client",children:[]}],u={toc:c};function m(e){var n=e.components,l=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,l,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cncf-opentelemetry-jaeger-interworking"},"CNCF OpenTelemetry Jaeger Interworking"),(0,a.kt)("p",null,"!! note\nAll the application code here is available from the docs ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tremor-rs/tremor-www/tree/main/docs/recipes/42_otel_jaeger"},"git repository"),"."),(0,a.kt)("p",null,"This example builds on the passthrough CNCF OpenTelemetry\nconfiguration but configures Jaeger as a receiver and exporter in the\nOpenTelemetry Collector."),(0,a.kt)("p",null,"It shows how legacy observability frameworks such as Jaeger can be\ningested into OpenTelemetry based services directly, or via the\nOpenTelemetry collector into tremor for specialized processing."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Jaeger service"),(0,a.kt)("li",{parentName:"ul"},"CNCF OpenTelemetry Collector service"),(0,a.kt)("li",{parentName:"ul"},"CNCF OpenTelemetry Onramp deployed into tremor"),(0,a.kt)("li",{parentName:"ul"},"Deployment configuration file")),(0,a.kt)("p",null,"External OpenTelemetry clients can use port ",(0,a.kt)("inlineCode",{parentName:"p"},"4316")," to send OpenTelemetry logs, traces and metrics\nthrough tremor. Tremor prints the json mapping to standard out and forwards the events to the\nOpenTelemetry collector."),(0,a.kt)("h2",{id:"environment"},"Environment"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{target:"_blank",href:t(8189).Z},"onramp")," we use is the ",(0,a.kt)("inlineCode",{parentName:"p"},"otel")," CNCF OpenTelemetry onramp listening on a non-standard CNCF OpenTelemetry port ",(0,a.kt)("inlineCode",{parentName:"p"},"4316"),", it receives protocol buffer messages over gRPC on this port. The log, metric and trace events received are converted to tremor's value system and passed through a passthrough pipeline to the CNCF OpenTelemetry sink. The sink will try to connect to a downstream CNCF\nOpenTelemetry endpoint. In this workshop we will use the well known OpenTelemetry port of ",(0,a.kt)("inlineCode",{parentName:"p"},"4317")," for our sink and run the standard OpenTelemetry collector on this port using its a ",(0,a.kt)("a",{target:"_blank",href:t(47843).Z},"collector configuration"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: otlp\n    type: otel # Use the OpenTelemetry gRPC listener source\n    codec: json # Json is the only supported value\n    config:\n      port: 4316 # The TCP port to listen on\n      host: "0.0.0.0" # The IP address to bind on ( all interfaces in this case )\n')),(0,a.kt)("p",null,"It connects to a passthrough pipeline. This pipeline forwards any received\nobservability events downstream unchanged."),(0,a.kt)("p",null,"We connect the passthrough output events into a standard output sink.\nThe ",(0,a.kt)("a",{target:"_blank",href:t(85078).Z},"binding")," expresses these relations and gives deployment connectivity graph."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"binding:\n  - id: example\n    links:\n      '/onramp/otlp/{instance}/out':\n       - '/pipeline/example/{instance}/in'\n      '/pipeline/example/{instance}/out':\n       - '/offramp/stdout/{instance}/in'\n")),(0,a.kt)("p",null,"Finally the ",(0,a.kt)("a",{target:"_blank",href:t(2718).Z},"mapping")," instanciates the binding with the given name and instance variable to activate the elements of the binding."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'mapping:\n  /binding/example/passthrough:\n    instance: "passthrough"\n')),(0,a.kt)("h2",{id:"business-logic"},"Business Logic"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-trickle"},"select event from in into out\n")),(0,a.kt)("h2",{id:"command-line-testing-during-logic-development"},"Command line testing during logic development"),(0,a.kt)("p",null,"Use any compliant OpenTelemetry instrumented application and configure the\nserver to our source on port ",(0,a.kt)("inlineCode",{parentName:"p"},"4316")," instead of the default ",(0,a.kt)("inlineCode",{parentName:"p"},"4317"),"."),(0,a.kt)("h2",{id:"docker"},"Docker"),(0,a.kt)("p",null,"For convenience, use the provided ",(0,a.kt)("a",{target:"_blank",href:t(52074).Z},"docker-compose.yaml")," to\nstart and stop tremor and the OpenTelemetry collector as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Start\n$ docker compose up\n\n# Stop\n$ docker compose down\n")),(0,a.kt)("h2",{id:"jaeger-client"},"Jaeger client"),(0,a.kt)("p",null,"We use an existing Jaeger client for demonstration purposes. Fetch the standard C++ Jaeger\nclient as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# Clone the git repo\n$ git clone https://github.com/jaegertracing/jaeger-client-cpp\n# Change directory into the repo root\n$ cd jaeger-client-cpp\n# Build ( make a cup of tea, this takes a while! )\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make\n")),(0,a.kt)("p",null,"Configure the example jaeger application to point at our dockerized service"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"disabled: false\nreporter:\n  logSpans: true\n  endpoint: http://localhost:14268/api/traces\nsampler:\n  type: const\n  param: 1\n")),(0,a.kt)("p",null,"Run the jeager client to generate trace spans"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# From the `build` directory\n$ ./app ../examples/config.yml\nINFO: Initializing logging reporter\nINFO: Reporting span f05fbb51006ac531:f062508e8013067f:f05fbb51006ac531:1\nINFO: Reporting span f05fbb51006ac531:f05fbb51006ac531:0000000000000000:1\n")),(0,a.kt)("p",null,"Verify our spans reached the Jaeger UI deployed in docker via pointing our browser to ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:16686")," by searching for traces:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"screenshot.png",src:t(9729).Z})),(0,a.kt)("p",null,"Verify that the OpenTelemetry Collector and tremor have processed our trace spans.\nIn this configuration we use the OpenTelemetry Collector to forward to Jaeger and to\nforward to tremor."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"screenshot.png",src:t(55085).Z})))}m.isMDXComponent=!0},52074:function(e,n,t){n.Z=t.p+"assets/files/docker-compose-e3eb8b16a67a558d58ea39c0297e1331.yaml"},47843:function(e,n,t){n.Z=t.p+"assets/files/collector-471c475023f5454091e05ac3c612df1e.yaml"},8189:function(e,n,t){n.Z=t.p+"assets/files/00_ramps-5ce8352c9157a33bbe01a370ae1488f1.yaml"},85078:function(e,n,t){n.Z=t.p+"assets/files/01_binding-2aa18844f0acf1b23539352449e0641d.yaml"},2718:function(e,n,t){n.Z=t.p+"assets/files/02_mapping-9c81a0870131ab67e86b0f001460a101.yaml"},55085:function(e,n,t){n.Z=t.p+"assets/images/docker-snap-2f5952bac9e2dec89776f0a093b70989.png"},9729:function(e,n,t){n.Z=t.p+"assets/images/jaeger-ui-4c1e8b2b8e7336480d02f24db249140a.png"}}]);