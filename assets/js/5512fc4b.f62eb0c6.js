"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[1240],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=i,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(g,a(a({ref:t},l),{},{components:r})):n.createElement(g,a({ref:t},l))}));function m(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},65874:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var n=r(87462),i=r(63366),o=(r(67294),r(3905)),a=["components"],s={},p="re",c={unversionedId:"scripting/tremor-script/stdlib/std/re",id:"scripting/tremor-script/stdlib/std/re",isDocsHomePage:!1,title:"re",description:"The re module contains functions for regular expression handing. Please note",source:"@site/docs/scripting/tremor-script/stdlib/std/re.md",sourceDirName:"scripting/tremor-script/stdlib/std",slug:"/scripting/tremor-script/stdlib/std/re",permalink:"/docs/next/scripting/tremor-script/stdlib/std/re",editUrl:"https://github.com/tremor-rs/tremor-www/tree/main/docs/scripting/tremor-script/stdlib/std/re.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"range",permalink:"/docs/next/scripting/tremor-script/stdlib/std/range"},next:{title:"record",permalink:"/docs/next/scripting/tremor-script/stdlib/std/record"}},l=[{value:"Functions",id:"functions",children:[{value:"replace(regex, input, to)",id:"replaceregex-input-to",children:[]},{value:"replace_all(regex, input, to)",id:"replace_allregex-input-to",children:[]},{value:"is_match(regex, input)",id:"is_matchregex-input",children:[]},{value:"split(regex, input)",id:"splitregex-input",children:[]}]}],u={toc:l};function d(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"re"},"re"),(0,o.kt)("p",null,"The re module contains functions for regular expression handing. Please note\nthat if applicable literal regular expressions are faster."),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"replaceregex-input-to"},"replace(regex, input, to)"),(0,o.kt)("p",null,"Replaces the first occurrence of regex in the input string with to."),(0,o.kt)("p",null,"References to match groups can be done using ",(0,o.kt)("inlineCode",{parentName:"p"},"$`` as either numbered\nreferences like "),"$1",(0,o.kt)("inlineCode",{parentName:"p"},"inserting the first capture or named using"),"$foo`\ninserting the capture named foo."),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"string")),(0,o.kt)("h3",{id:"replace_allregex-input-to"},"replace_all(regex, input, to)"),(0,o.kt)("p",null,"Replaces all occurrences of regex in the input string with to."),(0,o.kt)("p",null,"References to match groups can be done using ",(0,o.kt)("inlineCode",{parentName:"p"},"$")," as either numbered\nreferences like ",(0,o.kt)("inlineCode",{parentName:"p"},"$1")," inserting the first capture or named using ",(0,o.kt)("inlineCode",{parentName:"p"},"$foo"),"\ninserting the capture named foo."),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"string")),(0,o.kt)("h3",{id:"is_matchregex-input"},"is_match(regex, input)"),(0,o.kt)("p",null,"Returns if the regex machines input."),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"bool")),(0,o.kt)("h3",{id:"splitregex-input"},"split(regex, input)"),(0,o.kt)("p",null,"Splits the input string using the provided regular expression regex as\nseparator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tremor"},'re::split(" ", "this is a test") == ["this", "is", "a", "string"].\n')),(0,o.kt)("p",null,"Returns a ",(0,o.kt)("inlineCode",{parentName:"p"},"[string]")))}d.isMDXComponent=!0}}]);