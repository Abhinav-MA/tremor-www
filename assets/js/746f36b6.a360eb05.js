(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[5127],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return h}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(n),h=o,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||s;return n?r.createElement(d,a(a({ref:t},c),{},{components:n})):r.createElement(d,a({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<s;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5385:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return m}});var r=n(2122),o=n(9756),s=(n(7294),n(3905)),a=["components"],i={},l="Websocket Proxy",p={unversionedId:"Workshop/examples/proxies_lt_ws/README",id:"Workshop/examples/proxies_lt_ws/README",isDocsHomePage:!1,title:"Websocket Proxy",description:"Example Websocket proxy application built on top of Tremor and meant to be a demonstration of linked transports.",source:"@site/docs/Workshop/examples/33_proxies_lt_ws/README.md",sourceDirName:"Workshop/examples/33_proxies_lt_ws",slug:"/Workshop/examples/proxies_lt_ws/README",permalink:"/tremor-new-website/docs/Workshop/examples/proxies_lt_ws/README",editUrl:"https://github.com/skoech/tremor-new-website/tree/main/docs/docs/Workshop/examples/33_proxies_lt_ws/README.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HTTP Proxy",permalink:"/tremor-new-website/docs/Workshop/examples/proxies_lt_http/README"},next:{title:"HTTP -> Websocket Bridge",permalink:"/tremor-new-website/docs/Workshop/examples/bridges_lt_http_ws/README"}},c=[{value:"Setup",id:"setup",children:[{value:"Sources and sinks",id:"sources-and-sinks",children:[]},{value:"Message flow",id:"message-flow",children:[]},{value:"Processing logic",id:"processing-logic",children:[]}]},{value:"Testing",id:"testing",children:[]}],u={toc:c};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"websocket-proxy"},"Websocket Proxy"),(0,s.kt)("p",null,"Example Websocket proxy application built on top of Tremor and meant to be a demonstration of ",(0,s.kt)("a",{parentName:"p",href:"../../../operations/linked-transports.md"},"linked transports"),"."),(0,s.kt)("h2",{id:"setup"},"Setup"),(0,s.kt)("p",null,"!!! tip\nAll the code here is available in the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tremor-rs/tremor-www-docs/tree/main/docs/workshop/examples/33_proxies_lt_ws"},"git repository")," as well."),(0,s.kt)("h3",{id:"sources-and-sinks"},"Sources and sinks"),(0,s.kt)("p",null,"We configure a websocket onramp listening on port 9139, that is meant to be a proxy for our ",(0,s.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Workshop/examples/servers_lt_ws/README"},"example websocket server")," (configured as en endpoint in the websocket offramp here)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: ws\n    type: ws\n    linked: true\n    codec: string\n    preprocessors:\n      - lines\n    config:\n      host: 0.0.0.0\n      port: 9139\n\nofframp:\n  - id: upstream\n    type: ws\n    linked: true\n    codec: string\n    postprocessors:\n      - lines\n    config:\n      url: "ws://tremor-server:8139"\n')),(0,s.kt)("h3",{id:"message-flow"},"Message flow"),(0,s.kt)("p",null,"Incoming websocket messages from a client's websocket connection are forwarded to the upstream websocket server (via the ",(0,s.kt)("inlineCode",{parentName:"p"},"pass_incoming")," pipeline which just lives up to its name). The resulting upstream reply is then returned back to the client reusing its connection (after a quick pass through the ",(0,s.kt)("inlineCode",{parentName:"p"},"pass_outgoing")," pipeline)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'binding:\n  - id: main\n    links:\n      "/onramp/ws/{instance}/out":\n        ["/pipeline/pass_incoming/{instance}/in"]\n\n      "/pipeline/pass_incoming/{instance}/out":\n        ["/offramp/upstream/{instance}/in"]\n\n      "/offramp/upstream/{instance}/out":\n        ["/pipeline/pass_outgoing/{instance}/in"]\n\n      "/pipeline/pass_outgoing/{instance}/out":\n        ["/onramp/ws/{instance}/in"]\n')),(0,s.kt)("h3",{id:"processing-logic"},"Processing logic"),(0,s.kt)("p",null,"Implementation for the ",(0,s.kt)("inlineCode",{parentName:"p"},"pass_incoming")," (as well as ",(0,s.kt)("inlineCode",{parentName:"p"},"pass_outgoing"),") pipeline:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-trickle"},"select event from in into out;\n")),(0,s.kt)("p",null,"This example is intentionally light on the processing but you can imagine doing arbitrary processing based on the event data here (as well as dynamically changing the confiuration for the ",(0,s.kt)("a",{parentName:"p",href:"../../../artefacts/offramps.md#ws"},"websocket offramp")," via its metadata variables --  eg: things like the server url)."),(0,s.kt)("h2",{id:"testing"},"Testing"),(0,s.kt)("p",null,"Assuming you have all the code from the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tremor-rs/tremor-www-docs/tree/main/docs/workshop/examples/33_proxies_lt_ws"},"git repository"),", run the following to start our application (along with the ",(0,s.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Workshop/examples/servers_lt_ws/README"},"tremor websocket server example")," that is the upstream for our proxy):"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"docker-compose up\n")),(0,s.kt)("p",null,"Now let's try to test the echo capabilities of our upstream server, via a tool like ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/vi/websocat"},"websocat"),"."),(0,s.kt)("p",null,"!!! note\nCan be installed via ",(0,s.kt)("inlineCode",{parentName:"p"},"cargo install websocat")," for the lazy/impatient amongst us"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'# via proxy\n$ echo "hello" | websocat -n1 ws://localhost:9139\nhello\n\n# just the upstream\n$ echo "hello" | websocat -n1 ws://localhost:8139\nhello\n')),(0,s.kt)("p",null,"Our special snot-handling works as well:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'$ echo "snot" | websocat -n1 ws://localhost:9139\nbadger\n')),(0,s.kt)("p",null,"And if there's an internal tremor error while processing both the incoming message and the upstream reply to it (eg: codec or pre/post-processor failure), or if the upstream server is just down, an error will be bubbled up to the client. Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},'# stop the upstream server\n$ docker stop 33_proxies_lt_ws_tremor-server_1\n\n# upstream connection now gets closed from the proxy\n$ echo "hello" | websocat -n1 ws://localhost:9139\n{"error":"Error receiving reply from server ws://localhost:8139: WebSocket protocol error: Connection reset without closing handshake","event_id":"\n1:0:9"}\n\n# sending further messages results in errors\n$ echo "hello" | websocat -n1 ws://localhost:9139\n$ echo "hello" | websocat -n1 ws://localhost:9139\n{"error":"Error sending event to server ws://localhost:8139: Trying to work with closed connection","event_id":"1:0:10"}\n')))}m.isMDXComponent=!0}}]);