"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[3384],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,g=p["".concat(l,".").concat(d)]||p[d]||f[d]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},44334:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},metadata:function(){return l},toc:function(){return s},default:function(){return f}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],c={},l={unversionedId:"tremor-query/functions/win",id:"tremor-query/functions/win",isDocsHomePage:!1,title:"The `win` namespace",description:"The win module contains functions for aggregating over the current active window in a window of events. The functions can also be used in tilt frames where events emitting from a window are chained across multiple window frames in sequence.",source:"@site/docs/tremor-query/functions/win.md",sourceDirName:"tremor-query/functions",slug:"/tremor-query/functions/win",permalink:"/docs/tremor-query/functions/win",editUrl:"https://github.com/tremor-rs/tremor-new-website/tree/main/docs/tremor-query/functions/win.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"The `stats` namespace",permalink:"/docs/tremor-query/functions/stats"},next:{title:"Tremor-Query",permalink:"/docs/tremor-query/index"}},s=[{value:"Functions",id:"functions",children:[{value:"aggr::win::first() -&gt; event",id:"aggrwinfirst---event",children:[]},{value:"aggr::win::last() -&gt; event",id:"aggrwinlast---event",children:[]},{value:"aggr::win::collect_flattened() -&gt; event",id:"aggrwincollect_flattened---event",children:[]},{value:"aggr::win::collect_nested() -&gt; [event]|event",id:"aggrwincollect_nested---eventevent",children:[]}]}],u={toc:s};function f(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"win")," module contains functions for aggregating over the current active window in a window of events. The functions can also be used in tilt frames where events emitting from a window are chained across multiple window frames in sequence."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"aggrwinfirst---event"},"aggr::win::first() -> event"),(0,i.kt)("p",null,"Capture and return the first event that hits a window upon/after opening."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::win::first() # first event in a window\n")),(0,i.kt)("h3",{id:"aggrwinlast---event"},"aggr::win::last() -> event"),(0,i.kt)("p",null,"Capture and return the last event that hits a window upon/after opening."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::win::last()\n")),(0,i.kt)("h3",{id:"aggrwincollect_flattened---event"},"aggr::win::collect_flattened() -> ","[event]"),(0,i.kt)("p",null,"Captures all events in a window into an array of events."),(0,i.kt)("p",null,"In the case of tilt frames,  flattens out any tilt frame sub-arrays"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::win::collect_flattened()\n")),(0,i.kt)("h3",{id:"aggrwincollect_nested---eventevent"},"aggr::win::collect_nested() -> [","[event]","]|","[event]"),(0,i.kt)("p",null,"Captures all events in a window into an array of events."),(0,i.kt)("p",null,"In the case of tilt frames, each frame is preserved as a nested array of arrays. For a tilt frame of 3 windows, the inner-most leaf array contains events, and higher levels are arrays of arrays."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::win::collect_nested()\n")))}f.isMDXComponent=!0}}]);