(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[9969],{3905:function(t,e,r){"use strict";r.d(e,{Zo:function(){return s},kt:function(){return m}});var n=r(7294);function a(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function o(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){a(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function l(t,e){if(null==t)return{};var r,n,a=function(t,e){if(null==t)return{};var r,n,a={},i=Object.keys(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||(a[r]=t[r]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)r=i[n],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(a[r]=t[r])}return a}var c=n.createContext({}),p=function(t){var e=n.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):o(o({},e),t)),r},s=function(t){var e=p(t.components);return n.createElement(c.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var r=t.components,a=t.mdxType,i=t.originalType,c=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),d=p(r),m=a,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,o(o({ref:e},s),{},{components:r})):n.createElement(f,o({ref:e},s))}));function m(t,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var c in e)hasOwnProperty.call(e,c)&&(l[c]=e[c]);l.originalType=t,l.mdxType="string"==typeof t?t:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},760:function(t,e,r){"use strict";r.r(e),r.d(e,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var n=r(2122),a=r(9756),i=(r(7294),r(3905)),o=["components"],l={},c="Glob",p={unversionedId:"tremor-script/extractors/glob",id:"tremor-script/extractors/glob",isDocsHomePage:!1,title:"Glob",description:"Glob is an extractor that checks if the input string matches the specified Unix shell-style pattern#Unix-like). The extractor fails if an pattern is specified that is not valid or the string doesn't match the pattern.",source:"@site/docs/tremor-script/extractors/glob.md",sourceDirName:"tremor-script/extractors",slug:"/tremor-script/extractors/glob",permalink:"tremor-new-website/docs/tremor-script/extractors/glob",editUrl:"https://github.com/skoech/tremor-new-website/tree/main/docs/docs/tremor-script/extractors/glob.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dissect",permalink:"tremor-new-website/docs/tremor-script/extractors/dissect"},next:{title:"Grok",permalink:"tremor-new-website/docs/tremor-script/extractors/grok"}},s=[{value:"Predicate",id:"predicate",children:[]},{value:"Extraction",id:"extraction",children:[]},{value:"Patterns",id:"patterns",children:[]}],u={toc:s};function d(t){var e=t.components,r=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"glob"},"Glob"),(0,i.kt)("p",null,"Glob is an extractor that checks if the input string matches the specified ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Glob_(programming)#Unix-like"},"Unix shell-style pattern"),". The extractor fails if an pattern is specified that is not valid or the string doesn't match the pattern."),(0,i.kt)("h2",{id:"predicate"},"Predicate"),(0,i.kt)("p",null,"When used as a predicate with ",(0,i.kt)("inlineCode",{parentName:"p"},"~"),", the predicate will pass if the input matches the glob pattern passed as the parameter to the extractor."),(0,i.kt)("h2",{id:"extraction"},"Extraction"),(0,i.kt)("p",null,"The extractor returns true if the predicate passes else returns an error"),(0,i.kt)("h2",{id:"patterns"},"Patterns"),(0,i.kt)("p",null,"Patterns can be of the following types:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Pattern"),(0,i.kt)("th",{parentName:"tr",align:null},"Matches"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"?")),(0,i.kt)("td",{parentName:"tr",align:null},"Single character")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"*")),(0,i.kt)("td",{parentName:"tr",align:null},"any (0 or more) sequence or characters")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[\u2026]")),(0,i.kt)("td",{parentName:"tr",align:null},"any character inside the bracket. Supports ranges (e,g. ",(0,i.kt)("inlineCode",{parentName:"td"},"[0-9]")," will match any digit)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"[!\u2026]")),(0,i.kt)("td",{parentName:"tr",align:null},"negation of ",(0,i.kt)("inlineCode",{parentName:"td"},"[\u2026]"))))),(0,i.kt)("p",null,"Meta characters (e..g ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," ) can be matched by using ",(0,i.kt)("inlineCode",{parentName:"p"},"[ ]"),". (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"[ * ]")," will match a string that contains ",(0,i.kt)("inlineCode",{parentName:"p"},"*"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tremor"},'match { "test" : "INFO" } of\n  case foo = %{ test ~= glob|INFO*| } => foo\n  default => "ko"\nend;\n## will output true\n')))}d.isMDXComponent=!0}}]);