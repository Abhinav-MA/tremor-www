"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[8840],{3905:function(e,t,r){r.d(t,{Zo:function(){return f},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},f=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=s(r),m=a,d=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return r?n.createElement(d,o(o({ref:t},f),{},{components:r})):n.createElement(d,o({ref:t},f))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=r[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},21931:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},metadata:function(){return c},toc:function(){return s},default:function(){return p}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],l={},c={unversionedId:"tremor-script/stdlib/cncf/otel/logs/traceflags",id:"tremor-script/stdlib/cncf/otel/logs/traceflags",isDocsHomePage:!1,title:"traceflags",description:"The severity module defines severity_number values",source:"@site/docs/tremor-script/stdlib/cncf/otel/logs/traceflags.md",sourceDirName:"tremor-script/stdlib/cncf/otel/logs",slug:"/tremor-script/stdlib/cncf/otel/logs/traceflags",permalink:"/docs/tremor-script/stdlib/cncf/otel/logs/traceflags",editUrl:"https://github.com/tremor-rs/tremor-new-website/tree/main/docs/tremor-script/stdlib/cncf/otel/logs/traceflags.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"severity",permalink:"/docs/tremor-script/stdlib/cncf/otel/logs/severity"},next:{title:"metrics",permalink:"/docs/tremor-script/stdlib/cncf/otel/metrics"}},s=[{value:"Functions",id:"functions",children:[{value:"from_int(trace_flags)",id:"from_inttrace_flags",children:[]},{value:"is_valid(trace_flags)",id:"is_validtrace_flags",children:[]},{value:"make_default()",id:"make_default",children:[]}]}],f={toc:s};function p(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"severity")," module defines ",(0,i.kt)("inlineCode",{parentName:"p"},"severity_number")," values\nand associated utility functions"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/logs/data-model.md#field-traceflags"},"OpenTelemetry Log Data Model - Trace Flags")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://www.w3.org/TR/trace-context/#trace-flags"},"W3C Trace Context - Trace Flags")),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"from_inttrace_flags"},"from_int(trace_flags)"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"from_int")," function interprets a ",(0,i.kt)("inlineCode",{parentName:"p"},"trace_flags")," integer value argument\nto see if it is ",(0,i.kt)("inlineCode",{parentName:"p"},"sampled-flag")," ( decimal ",(0,i.kt)("inlineCode",{parentName:"p"},"128")," ) is set. All other flags are\ncurrently unused and SHOULD be ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," ( unset ) in conforming ",(0,i.kt)("inlineCode",{parentName:"p"},"W3C Trace Context"),"\nand conformant ",(0,i.kt)("inlineCode",{parentName:"p"},"OpenTelemetry")," implementations"),(0,i.kt)("h3",{id:"is_validtrace_flags"},"is_valid(trace_flags)"),(0,i.kt)("p",null,"Checks if a ",(0,i.kt)("inlineCode",{parentName:"p"},"trace_flags")," instance is correct and valid"),(0,i.kt)("h3",{id:"make_default"},"make_default()"),(0,i.kt)("p",null,"Returns the default configuration of traceflags"))}p.isMDXComponent=!0}}]);