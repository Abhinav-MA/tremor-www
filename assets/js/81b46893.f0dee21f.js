(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[2679],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=i,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9226:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(2122),i=n(9756),o=(n(7294),n(3905)),a=["components"],l={},s="span_id",c={unversionedId:"tremor-script/stdlib/cncf/otel/span_id",id:"tremor-script/stdlib/cncf/otel/span_id",isDocsHomePage:!1,title:"span_id",description:"Span Identifiers",source:"@site/docs/tremor-script/stdlib/cncf/otel/span_id.md",sourceDirName:"tremor-script/stdlib/cncf/otel",slug:"/tremor-script/stdlib/cncf/otel/span_id",permalink:"/tremor-new-website/docs/tremor-script/stdlib/cncf/otel/span_id",editUrl:"https://github.com/tremor-rs/tremor-new-website/tree/main/docs/tremor-script/stdlib/cncf/otel/span_id.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"temporality",permalink:"/tremor-new-website/docs/tremor-script/stdlib/cncf/otel/metrics/temporality"},next:{title:"trace",permalink:"/tremor-new-website/docs/tremor-script/stdlib/cncf/otel/trace"}},p=[{value:"Functions",id:"functions",children:[{value:"is_valid(span_id)",id:"is_validspan_id",children:[]}]}],u={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"span_id"},"span_id"),(0,o.kt)("p",null,"Span Identifiers"),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"is_validspan_id"},"is_valid(span_id)"),(0,o.kt)("p",null,"Is the ",(0,o.kt)("inlineCode",{parentName:"p"},"span_id")," valid"),(0,o.kt)("p",null,"Checks the ",(0,o.kt)("inlineCode",{parentName:"p"},"span_id")," argument to see if it is a valid\nspan id. A legal span id is one of:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"An array of integers in the range of ","[0..=255]"," of length 8"),(0,o.kt)("li",{parentName:"ul"},"A binary 8 byte value"),(0,o.kt)("li",{parentName:"ul"},"An array of 8 int values"),(0,o.kt)("li",{parentName:"ul"},"A 16-byte hex-encoded string"),(0,o.kt)("li",{parentName:"ul"},"Regardless of representation, the value must not be all zeroes")),(0,o.kt)("p",null,"Returns a record when the representation is well-formed of the form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tremor"},'{\n"kind": "string"|"binary"|"array", # Depends on input\n"valid": true|false,               # True if well-formed and valid\n"value": "<span_id>"               # Representation depends on `kind`\n}\n')),(0,o.kt)("p",null,"Returns an empty record ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," when the representation not well-formed"))}d.isMDXComponent=!0}}]);