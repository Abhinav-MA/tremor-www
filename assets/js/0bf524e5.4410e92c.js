"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[8468],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,g=p["".concat(l,".").concat(d)]||p[d]||f[d]||i;return t?r.createElement(g,o(o({ref:n},u),{},{components:t})):r.createElement(g,o({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},83119:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),o=["components"],c={},l="The `win` namespace",s={unversionedId:"tremor-query/functions/win",id:"version-0.11/tremor-query/functions/win",isDocsHomePage:!1,title:"The `win` namespace",description:"The win module contains functions for aggregating over the current active window in a window of events. The functions can also be used in tilt frames where events emitting from a window are chained across multiple window frames in sequence.",source:"@site/versioned_docs/version-0.11/tremor-query/functions/win.md",sourceDirName:"tremor-query/functions",slug:"/tremor-query/functions/win",permalink:"/docs/tremor-query/functions/win",editUrl:"https://github.com/tremor-rs/tremor-www/tree/main/versioned_docs/version-0.11/tremor-query/functions/win.md",tags:[],version:"0.11",frontMatter:{},sidebar:"version-0.11/tutorialSidebar",previous:{title:"The `stats` namespace",permalink:"/docs/tremor-query/functions/stats"},next:{title:"Tremor-Query",permalink:"/docs/tremor-query/index"}},u=[{value:"Functions",id:"functions",children:[{value:"aggr::win::first() -&gt; event",id:"aggrwinfirst---event",children:[]},{value:"aggr::win::last() -&gt; event",id:"aggrwinlast---event",children:[]},{value:"aggr::win::collect_flattened() -&gt; event",id:"aggrwincollect_flattened---event",children:[]},{value:"aggr::win::collect_nested() -&gt; [event]|event",id:"aggrwincollect_nested---eventevent",children:[]}]}],f={toc:u};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"the-win-namespace"},"The ",(0,i.kt)("inlineCode",{parentName:"h1"},"win")," namespace"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"win")," module contains functions for aggregating over the current active window in a window of events. The functions can also be used in tilt frames where events emitting from a window are chained across multiple window frames in sequence."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"aggrwinfirst---event"},"aggr::win::first() -> event"),(0,i.kt)("p",null,"Capture and return the first event that hits a window upon/after opening."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::win::first() # first event in a window\n")),(0,i.kt)("h3",{id:"aggrwinlast---event"},"aggr::win::last() -> event"),(0,i.kt)("p",null,"Capture and return the last event that hits a window upon/after opening."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::win::last()\n")),(0,i.kt)("h3",{id:"aggrwincollect_flattened---event"},"aggr::win::collect_flattened() -> ","[event]"),(0,i.kt)("p",null,"Captures all events in a window into an array of events."),(0,i.kt)("p",null,"In the case of tilt frames,  flattens out any tilt frame sub-arrays"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::win::collect_flattened()\n")),(0,i.kt)("h3",{id:"aggrwincollect_nested---eventevent"},"aggr::win::collect_nested() -> [","[event]","]|","[event]"),(0,i.kt)("p",null,"Captures all events in a window into an array of events."),(0,i.kt)("p",null,"In the case of tilt frames, each frame is preserved as a nested array of arrays. For a tilt frame of 3 windows, the inner-most leaf array contains events, and higher levels are arrays of arrays."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::win::collect_nested()\n")))}p.isMDXComponent=!0}}]);