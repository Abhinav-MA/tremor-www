(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[8152],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return u}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),m=s(n),u=a,g=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return n?r.createElement(g,i(i({ref:t},p),{},{components:n})):r.createElement(g,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1460:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],c={},l="Regex (re)",s={unversionedId:"tremor-script/extractors/regex",id:"tremor-script/extractors/regex",isDocsHomePage:!1,title:"Regex (re)",description:'The regex extractor extracts fields from data by parsing a regular expression provided by the user. It accepts a "perl-style regular expression"',source:"@site/docs/tremor-script/extractors/regex.md",sourceDirName:"tremor-script/extractors",slug:"/tremor-script/extractors/regex",permalink:"/docs/tremor-script/extractors/regex",editUrl:"https://github.com/skoech/tremor-new-website/tree/main/docs/docs/tremor-script/extractors/regex.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"KV",permalink:"/docs/tremor-script/extractors/kv"},next:{title:"Functions",permalink:"/docs/tremor-script/functions"}},p=[{value:"Predicate",id:"predicate",children:[]},{value:"Extraction",id:"extraction",children:[]},{value:"Example",id:"example",children:[{value:"Matching one character",id:"matching-one-character",children:[]},{value:"Character classes",id:"character-classes",children:[]}]}],d={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"regex-re"},"Regex (re)"),(0,o.kt)("p",null,'The regex extractor extracts fields from data by parsing a regular expression provided by the user. It accepts a "perl-style regular expression"'),(0,o.kt)("h2",{id:"predicate"},"Predicate"),(0,o.kt)("p",null,"When used with ",(0,o.kt)("inlineCode",{parentName:"p"},"~"),", the predicate passes if a valid regular expression is passed."),(0,o.kt)("h2",{id:"extraction"},"Extraction"),(0,o.kt)("p",null,"If the predicate passes, the extractor returns the matched values from the target. Returns an error if the regex fails to match."),(0,o.kt)("h2",{id:"example"},"Example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tremor"},'drop match { "test": "http://example.com/", "footle": "bar" } of\n  case foo = %{ test ~= re|^http://.*/$|, footle == "bar" } => foo\n  default => "ko"\nend\n')),(0,o.kt)("p",null,"The extractor is called by using the ",(0,o.kt)("inlineCode",{parentName:"p"},"~=")," operator and specifying ",(0,o.kt)("inlineCode",{parentName:"p"},"re")," as the extractor followed by regular expression after the pipe operator."),(0,o.kt)("p",null,"The following syntax is supported:"),(0,o.kt)("h3",{id:"matching-one-character"},"Matching one character"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},".             any character except new line (includes new line with s flag)\n\\d            digit (\\p{Nd})\n\\D            not digit\n\\pN           One-letter name Unicode character class\n\\p{Greek}     Unicode character class (general category or script)\n\\PN           Negated one-letter name Unicode character class\n\\P{Greek}     negated Unicode character class (general category or script)\n")),(0,o.kt)("h3",{id:"character-classes"},"Character classes"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"[xyz]         A character class matching either x, y or z (union).\n[^xyz]        A character class matching any character except x, y and z.\n[a-z]         A character class matching any character in range a-z.\n[[:alpha:]]   ASCII character class ([A-Za-z])\n[[:^alpha:]]  Negated ASCII character class ([^A-Za-z])\n[x[^xyz]]     Nested/grouping character class (matching any character except y and z)\n[a-y&&xyz]    Intersection (matching x or y)\n[0-9&&[^4]]   Subtraction using intersection and negation (matching 0-9 except 4)\n[0-9--4]      Direct subtraction (matching 0-9 except 4)\n[a-g~~b-h]    Symmetric difference (matching `a` and `h` only)\n[\\[\\]]        Escaping in character classes (matching [ or ])\n")),(0,o.kt)("p",null,"Any named character class may appear inside a bracketed ",(0,o.kt)("inlineCode",{parentName:"p"},"[...]")," character class. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"[\\p{Greek}[:digit:]]"),"matches any Greek or ASCII digit. ",(0,o.kt)("inlineCode",{parentName:"p"},"[\\p{Greek}&&\\pL]")," matches Greek letters."),(0,o.kt)("p",null,"Precedence in character classes, from most binding to least:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Ranges: ",(0,o.kt)("inlineCode",{parentName:"li"},"a-cd")," == ",(0,o.kt)("inlineCode",{parentName:"li"},"[a-c]d")),(0,o.kt)("li",{parentName:"ol"},"Union: ",(0,o.kt)("inlineCode",{parentName:"li"},"ab&&bc")," == ",(0,o.kt)("inlineCode",{parentName:"li"},"[ab]&&[bc]")),(0,o.kt)("li",{parentName:"ol"},"Intersection: ",(0,o.kt)("inlineCode",{parentName:"li"},"^a-z&&b")," == ",(0,o.kt)("inlineCode",{parentName:"li"},"^[a-z&&b]")),(0,o.kt)("li",{parentName:"ol"},"Negation")),(0,o.kt)("h4",{id:"composites"},"Composites"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"xy    concatenation (x followed by y)\nx|y   alternation (x or y, prefer x)\n")),(0,o.kt)("h4",{id:"repetitions"},"Repetitions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"x*        zero or more of x (greedy)\nx+        one or more of x (greedy)\nx?        zero or one of x (greedy)\nx*?       zero or more of x (ungreedy/lazy)\nx+?       one or more of x (ungreedy/lazy)\nx??       zero or one of x (ungreedy/lazy)\nx{n,m}    at least n x and at most m x (greedy)\nx{n,}     at least n x (greedy)\nx{n}      exactly n x\nx{n,m}?   at least n x and at most m x (ungreedy/lazy)\nx{n,}?    at least n x (ungreedy/lazy)\nx{n}?     exactly n x\n")),(0,o.kt)("h4",{id:"empty-matches"},"Empty matches"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"^     the beginning of text (or start-of-line with multi-line mode)\n$     the end of text (or end-of-line with multi-line mode)\n\\A    only the beginning of text (even with multi-line mode enabled)\n\\z    only the end of text (even with multi-line mode enabled)\n\\b    a Unicode word boundary (\\w on one side and \\W, \\A, or \\z on other)\n\\B    not a Unicode word boundary\n")),(0,o.kt)("h4",{id:"grouping-and-flags"},"Grouping and flags"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"(exp)          numbered capture group (indexed by opening parenthesis)\n(?P<name>exp)  named (also numbered) capture group (allowed chars: [_0-9a-zA-Z])\n(?:exp)        non-capturing group\n(?flags)       set flags within current group\n(?flags:exp)   set flags for exp (non-capturing)\n")),(0,o.kt)("p",null,"Flags are each a single character. For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"(?x)")," sets the flag ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"(?-x)")," clears the flag ",(0,o.kt)("inlineCode",{parentName:"p"},"x"),". Multiple flags can be set or cleared at the same time: ",(0,o.kt)("inlineCode",{parentName:"p"},"(?xy)")," sets both the ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"y")," flags and ",(0,o.kt)("inlineCode",{parentName:"p"},"(?x-y)")," sets the ",(0,o.kt)("inlineCode",{parentName:"p"},"x")," flag and clears the ",(0,o.kt)("inlineCode",{parentName:"p"},"y")," flag."),(0,o.kt)("p",null,"All flags are by default set to off unless stated otherwise. They are:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"i     case-insensitive: letters match both upper and lower case\nm     multi-line mode: ^ and $ match begin/end of line\ns     allow . to match \\n\nU     swap the meaning of x* and x*?\nu     Unicode support (enabled by default)\nx     ignore whitespace and allow line comments (starting with `#`)\n")))}m.isMDXComponent=!0}}]);