"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[4004],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),m=r,d=h["".concat(l,".").concat(m)]||h[m]||u[m]||i;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1869:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return p},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],s={},l={type:"mdx",permalink:"/tremor-new-website/rfcs/0002-pipeline-state-mechanism",source:"@site/src/pages/rfcs/0002-pipeline-state-mechanism.md"},p=[{value:"Summary",id:"summary",children:[]},{value:"Motivation",id:"motivation",children:[]},{value:"Guide-level Explanation",id:"guide-level-explanation",children:[]},{value:"Reference-level Explanation",id:"reference-level-explanation",children:[]},{value:"Drawbacks",id:"drawbacks",children:[]},{value:"Rationale and Alternatives",id:"rationale-and-alternatives",children:[]},{value:"Prior Art",id:"prior-art",children:[]},{value:"Unresolved Questions",id:"unresolved-questions",children:[]},{value:"Future possibilities",id:"future-possibilities",children:[]}],c={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Feature Name: rfc_0002_pipeline_state_mechanism"),(0,i.kt)("li",{parentName:"ul"},"Start Date: 2020-01-22"),(0,i.kt)("li",{parentName:"ul"},"Issue: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/tremor-rs/tremor-rfcs/issues/3"},"tremor-rs/tremor-rfcs#0003")),(0,i.kt)("li",{parentName:"ul"},"RFC PR: ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/tremor-rs/tremor-rfcs/pull/4"},"tremor-rs/tremor-rfcs#0004"))),(0,i.kt)("h1",{id:"pipeline-state-mechanism"},"Pipeline State Mechanism"),(0,i.kt)("h2",{id:"summary"},"Summary"),(0,i.kt)("p",null,"Legacy Tremor YAML configured Tremor pipeline and Trickle query language pipelines currently do not track state across events over time. A mechanism is required to introduce state management and storage facilities to the Tremor runtime and made available to pipeline implementations."),(0,i.kt)("h2",{id:"motivation"},"Motivation"),(0,i.kt)("p",null,"The absence of a state mechanism limits the usefulness and extent of algorithms that can be implemented by Tremor to those that are stateless, or those that leverage builtin custom operators that maintain state such as the 'bucket' or 'batch' operators."),(0,i.kt)("p",null,"A state mechanism and supporting user-facing facilities would allow users to exploit stateful algorithms for session tracking, building and maintaining application state or for the query language to evolve support for in memory or persistent tables."),(0,i.kt)("h2",{id:"guide-level-explanation"},"Guide-level Explanation"),(0,i.kt)("p",null,"The state mechanism in Tremor pipelines allows operator node-level state management and storage that persists for the running lifetime of a pipeline algorithm deployed into the Tremor runtime."),(0,i.kt)("p",null,"The state mechanism introduces the ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," keyword into the Tremor scripting\nlanguage. This new keyword provides access to the state storage contents via path expressions (much like how the ",(0,i.kt)("inlineCode",{parentName:"p"},"event")," keyword works, with the key difference\nbeing that the state storage is shared across events). On pipeline initialization, the state will be initialized as ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," and users are free to set it to arbitrary value over the course of processing."),(0,i.kt)("p",null,"Here's a tremor-script example demonstrating the usage of state mechanism --\nit maintains a counter for the events coming in and emits the count alongside\nthe event:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tremor"},'  match type::is_null(state) of\n    case true =>\n      let state = {"count": 1}\n    default =>\n      let state.count = state.count + 1\n  end;\n\n  {\n    "count": state.count,\n    "event": event\n  }\n')),(0,i.kt)("p",null,"This will work as part of the ",(0,i.kt)("inlineCode",{parentName:"p"},"runtime::tremor")," operator confguration in the legacy pipeline yaml setup, and also as an embedded script in the trickle definition of the pipeline."),(0,i.kt)("p",null,"Other pipeline operators can utilize the same underlying state storage. An example is the new ",(0,i.kt)("inlineCode",{parentName:"p"},"generic::counter")," operator that replicates the functionality above:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"define generic::counter operator my_counter;\n\ncreate operator my_counter;\n\nselect event from in into my_counter;\nselect event from my_counter into out;\n")),(0,i.kt)("p",null,"State is not shared across operator nodes i.e. we have separate state storage for each operator instance and an operator can access only the storage associated with the operator."),(0,i.kt)("h2",{id:"reference-level-explanation"},"Reference-level Explanation"),(0,i.kt)("p",null,"A new struct to encapsulate state across each of the operator nodes should be\nintroduced. Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"struct State {\n    // this vector holds the state value for each operator node\n    ops: Vec<Value<'static>>,\n}\n")),(0,i.kt)("p",null,"Inside the struct, the operator node-level state can then be ordered in the same\nway as nodes in the pipeline graph, following the strategy we have in use already for storing the node-level metrics in the graph. When the event is passed to\nthe operator node for processing, state specific to the operator can then be passed on by keying on the index of the node in the graph. This ensures that state is not shared across the operator instances."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"State")," struct will be initialialized on pipeline creation, and will be destroyed on destruction of a pipline when it is undeployed or the main process is shut down."),(0,i.kt)("p",null,"Effectively, the ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," mechanism encapsulates the entire micro-state of a pipeline and any captured user defined logic in a supported scripting language or operator in a pipeline. This allows pipeline state to be recorded in a snapshot to support advanced use cases such as pipeline migration through coordinated passivation, serialization, migration, deserialization and re-activation of a pipeline on a different tremor-runtime node without loss of state."),(0,i.kt)("p",null,"In the Tremor scripting/query language, the ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," keyword provides a reference\nonto the associated operator specifc state managed by the runtime."),(0,i.kt)("h2",{id:"drawbacks"},"Drawbacks"),(0,i.kt)("p",null,"Tremor-runtime is a working system and is currently stable. Since the implementation of the state mechanism will touch the main event pathways throughout the pipeline as well as across the scripting language, it has the potential to introduce inefficiencies as well as instability, if not done right."),(0,i.kt)("p",null,"By consolidating on a single namespace ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," we stay consistent with other specialized keyword forms such as ",(0,i.kt)("inlineCode",{parentName:"p"},"args"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"group"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"window")," that have reserved meaning in Tremor in different contexts/situations. This introduces cognitive dissonance to the user (but in a managed way)."),(0,i.kt)("p",null,"Regarding the ",(0,i.kt)("inlineCode",{parentName:"p"},"generic::counter")," operator that we have proposed to introduce as\na demonstration of the state mechanism usage in a custom in-built operator, it\nmay be that it won't find actual real-world usage and it will continue to languish in our codebase as an example. Even for the case when people need such a\nfunctionality, it is trivially replicated from tremor-script (such an example was presented above too)."),(0,i.kt)("h2",{id:"rationale-and-alternatives"},"Rationale and Alternatives"),(0,i.kt)("p",null,"In this RFC, the basic mechanism as outlined can be implemented and exposed to the user with fairly minimal changes to the script/query language required to support an implementation."),(0,i.kt)("p",null,"An alternative leveraging the metadata facility and usurping the ",(0,i.kt)("inlineCode",{parentName:"p"},"$state")," namespace would result in marginally less implementation effort, but risks opening up other constraints to the metadata namespace. Such changes are user-impacting, and, as such, not accepted."),(0,i.kt)("h2",{id:"prior-art"},"Prior Art"),(0,i.kt)("p",null,"None."),(0,i.kt)("h2",{id:"unresolved-questions"},"Unresolved Questions"),(0,i.kt)("p",null,"This RFC does not specify full internals or implementation of the state mechanism as it applies to operators. It is assumed that a ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," variable will be available to event handlers by the runtime that are managed by the runtime and partitioned by operator."),(0,i.kt)("p",null,"This RFC limits the state that an operator can have to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," type, which may not be suitable for all our operator state needs. An example is the LRU cache\ncurrently in use by the bucketing operator, or the goal to seed and cache a\nrandom number generator for use in tremor-script's random module functions. For\nsuch needs, we can continue to implement stateful implementations outside of the\npipeline state mechanism and for the cases when we do need to store them somewhere central (eg: to enable pipeline migrations as part of clustering effort), we can opt to serialize these data structures into (and deserialize out) of the pipeline state. We will revisit this topic in the future when such needs arise."),(0,i.kt)("h2",{id:"future-possibilities"},"Future possibilities"),(0,i.kt)("p",null,"This RFC normatively reserves the ",(0,i.kt)("inlineCode",{parentName:"p"},"state")," keyword for pipeline state management. The internal structure (schema) of the implied state struct is managed by this RFC. This RFC should be updated if the internal structure (schema) of the implied state record is further specified in the future (eg: we add an attribute to the struct to support state global to the pipeline)."),(0,i.kt)("p",null,"Other operators that maintain state can be migrated to use the new pipeline state mechanism (eg: for the batch or backpressure operator) -- this would be a necissity when we want to support pipeline migration to a different Tremor node, when we have clustering for Tremor."))}u.isMDXComponent=!0}}]);