"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[1828],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return v}});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),m=u(n),v=s,d=m["".concat(c,".").concat(v)]||m[v]||p[v]||a;return n?r.createElement(d,o(o({ref:t},l),{},{components:n})):r.createElement(d,o({ref:t},l))}));function v(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},75051:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return m}});var r=n(87462),s=n(63366),a=(n(67294),n(3905)),o=["components"],i={},c="Periodic Synthetic Metrics Events",u={unversionedId:"tremor-query/recipes",id:"version-0.11/tremor-query/recipes",isDocsHomePage:!1,title:"Periodic Synthetic Metrics Events",description:"Periodically, produce basic statistics and percentiles / quartiles from a stream of ingested events, for a particular value in the inbound event stream.",source:"@site/versioned_docs/version-0.11/tremor-query/recipes.md",sourceDirName:"tremor-query",slug:"/tremor-query/recipes",permalink:"/docs/tremor-query/recipes",editUrl:"https://github.com/tremor-rs/tremor-www/tree/main/versioned_docs/version-0.11/tremor-query/recipes.md",tags:[],version:"0.11",frontMatter:{},sidebar:"version-0.11/tutorialSidebar",previous:{title:"pp",permalink:"/docs/tremor-query/pp"},next:{title:"Trickle Walkthough",permalink:"/docs/tremor-query/walkthrough"}},l=[],p={toc:l};function m(e){var t=e.components,n=(0,s.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"periodic-synthetic-metrics-events"},"Periodic Synthetic Metrics Events"),(0,a.kt)("p",null,"Periodically, produce basic statistics and percentiles / quartiles from a stream of ingested events, for a particular value in the inbound event stream."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-trickle"},'# Every 10 seconds\ncreate tumbling window `10secs`\n with\n   interval = datetime::with_seconds(10),\nend;\n\n# Aggregate events producing statistics into a temporary stream\nselect {\n    "measurement": event.measurement,\n    "tags": patch event.tags of insert "window" => "10s" end,\n    "stats": aggr::stats::hdr(event.fields[group[2]], [ "0.42", "0.5", "0.9", "0.99", "0.999" ]),\n    "class": group[2]\n}\nfrom in[`10secs`]\ngroup by set(event.measurement, event.tags, each(record::keys(event.fields)))\ninto normalize\nhaving event.stats.count > 100; # discard if not enough sample data for group\n\n# create a temporary stream to normalize results\ncreate stream normalize;\n\n# normalize output record to match requirements downstream ( influx )\nselect {\n  "measurement":  event.measurement,\n  "tags":  event.tags,\n  "fields":  {\n    "count_#{event.class}":  event.stats.count,\n    "min_#{event.class}":  event.stats.min,\n    "max_#{event.class}":  event.stats.max,\n    "mean_#{event.class}":  event.stats.mean,\n    "stdev_#{event.class}":  event.stats.stdev,\n    "var_#{event.class}":  event.stats.var,\n    "p42_#{event.class}":  event.stats.percentiles["0.42"],\n    "p50_#{event.class}":  event.stats.percentiles["0.5"],\n    "p90_#{event.class}":  event.stats.percentiles["0.9"],\n    "p99_#{event.class}":  event.stats.percentiles["0.99"],\n    "p99.9_#{event.class}":  event.stats.percentiles["0.999"]\n  }\n}\nfrom normalize\ninto out;\n')))}m.isMDXComponent=!0}}]);