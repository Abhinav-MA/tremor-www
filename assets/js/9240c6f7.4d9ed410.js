"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[2902],{3905:function(t,e,a){a.d(e,{Zo:function(){return c},kt:function(){return p}});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var l=n.createContext({}),u=function(t){var e=n.useContext(l),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},c=function(t){var e=u(t.components);return n.createElement(l.Provider,{value:e},t.children)},g={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},d=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,l=t.parentName,c=o(t,["components","mdxType","originalType","parentName"]),d=u(a),p=r,m=d["".concat(l,".").concat(p)]||d[p]||g[p]||i;return a?n.createElement(m,s(s({ref:e},c),{},{components:a})):n.createElement(m,s({ref:e},c))}));function p(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o.mdxType="string"==typeof t?t:r,s[1]=o;for(var u=2;u<i;u++)s[u]=a[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},15030:function(t,e,a){a.r(e),a.d(e,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u},default:function(){return g}});var n=a(87462),r=a(63366),i=(a(67294),a(3905)),s=["components"],o={},l={unversionedId:"tremor-query/functions/stats",id:"tremor-query/functions/stats",isDocsHomePage:!1,title:"The `stats` namespace",description:"The stats module contains functions for aggregating statistical measures",source:"@site/docs/tremor-query/functions/stats.md",sourceDirName:"tremor-query/functions",slug:"/tremor-query/functions/stats",permalink:"/docs/tremor-query/functions/stats",editUrl:"https://github.com/tremor-rs/tremor-new-website/tree/main/docs/tremor-query/functions/stats.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Aggregate Functions",permalink:"/docs/tremor-query/functions"},next:{title:"The `win` namespace",permalink:"/docs/tremor-query/functions/win"}},u=[{value:"Size",id:"size",children:[]},{value:"Functions",id:"functions",children:[{value:"aggr::stats::count() -&gt; int",id:"aggrstatscount---int",children:[]},{value:"aggr::stats::min(int|float) -&gt; int|float",id:"aggrstatsminintfloat---intfloat",children:[]},{value:"aggr::stats::max(int|float) -&gt; int|float",id:"aggrstatsmaxintfloat---intfloat",children:[]},{value:"aggr::stats::sum(int|float) -&gt; int|float",id:"aggrstatssumintfloat---intfloat",children:[]},{value:"aggr::stats::var(int|float) -&gt; float",id:"aggrstatsvarintfloat---float",children:[]},{value:"aggr::stats::stdev(int|float) -&gt; float",id:"aggrstatsstdevintfloat---float",children:[]},{value:"aggr::stats::mean(int|float) -&gt; float",id:"aggrstatsmeanintfloat---float",children:[]},{value:"aggr::stats::hdr(int|float) -&gt; record",id:"aggrstatshdrintfloat---record",children:[]},{value:"aggr::stats::dds(int|float) -&gt; record",id:"aggrstatsddsintfloat---record",children:[]}]}],c={toc:u};function g(t){var e=t.components,a=(0,r.Z)(t,s);return(0,i.kt)("wrapper",(0,n.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"stats")," module contains functions for aggregating statistical measures\nof various events."),(0,i.kt)("h2",{id:"size"},"Size"),(0,i.kt)("p",null,"When using stats aggregate functions size in memory becomes an important factor from a capacity\nplanning perspective. The exact size of a window using aggregates depends on three main factors:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'The size of the dimension identifier. I.e. if the window is identified by the string "window" it will\nrequire that amount of memory related to this. If it is identified by an array of 10.000 elements\nall reading "window" it will use (about) 10.000 times that size.'),(0,i.kt)("li",{parentName:"ul"},"The unit size of each aggregate used in the window. We will try to give an estimate of size\nfor each aggregate but please be aware that those are not always exact as they can depend on\nthe data they hold."),(0,i.kt)("li",{parentName:"ul"},"The number of groups, if grouping is configured. Each group will maintain a separate window of data")),(0,i.kt)("p",null,'For aggregates we\'ll provide an "order of magnitude" and a growth rate if applicable.'),(0,i.kt)("p",null,"For example ",(0,i.kt)("inlineCode",{parentName:"p"},"Fixed, 10 bytes")," indicate that the size doesn't grow and is in the order of two digit\nbytes. We try to give pessimistic estimates where possible."),(0,i.kt)("h2",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"aggrstatscount---int"},"aggr::stats::count() -> int"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"size"),": Fixed, 10 bytes")),(0,i.kt)("p",null,"Counts the number of events aggregated in the current windowed operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::stats::count() # number of items in the window\n")),(0,i.kt)("h3",{id:"aggrstatsminintfloat---intfloat"},"aggr::stats::min(int|float) -> int|float"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"size"),": Fixed, 10 bytes")),(0,i.kt)("p",null,"Determines the smallest event value in the current windowed operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::stats::min(event.value)\n")),(0,i.kt)("h3",{id:"aggrstatsmaxintfloat---intfloat"},"aggr::stats::max(int|float) -> int|float"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"size"),": Fixed, 10 bytes")),(0,i.kt)("p",null,"Determines the largest event value in the current windowed operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::stats::max(event.value)\n")),(0,i.kt)("h3",{id:"aggrstatssumintfloat---intfloat"},"aggr::stats::sum(int|float) -> int|float"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"size"),": Fixed, 10 bytes")),(0,i.kt)("p",null,"Determines the arithmetic sum of event values in the current windowed operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::stats::sum(event.value)\n")),(0,i.kt)("h3",{id:"aggrstatsvarintfloat---float"},"aggr::stats::var(int|float) -> float"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"size"),": Fixed, 100 bytes")),(0,i.kt)("p",null,"Calculates the sample variance of event values in the current windowed operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::stats::var(event.value)\n")),(0,i.kt)("h3",{id:"aggrstatsstdevintfloat---float"},"aggr::stats::stdev(int|float) -> float"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"size"),": Fixed, 100 bytes")),(0,i.kt)("p",null,"Calculates the sample standard deviation of event values in the current windowed operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::stats::stdev(event.value)\n")),(0,i.kt)("h3",{id:"aggrstatsmeanintfloat---float"},"aggr::stats::mean(int|float) -> float"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"size"),": Fixed, 100 bytes")),(0,i.kt)("p",null,"Calculates the stastical mean of the event values in the current windowed operation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},"aggr::stats::mean(event.value)\n")),(0,i.kt)("h3",{id:"aggrstatshdrintfloat---record"},"aggr::stats::hdr(int|float) -> record"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"size"),": Fixed, 100 Kilo Bytes (note: this strongly depends on configuration, and can be estimated more correctly ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/HdrHistogram/HdrHistogram#footprint-estimation"},"with this formula"),")")),(0,i.kt)("p",null,"Uses a High Dynamic Range ( HDR ) Histogram to calculate all basic statistics against the event values sin the current windowed operation. The function additionally interpolates percentiles or quartiles based on a configuration specification passed in as an argument to the aggregater function."),(0,i.kt)("p",null,"The HDR Histogram trades off memory utilisation for accuracy and is configured internally to limit accuracy to 2 significant decimal places."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},'aggr::stats::hdr(event.value, ["0.5","0.75","0.9","0.99","0.999"])\n')),(0,i.kt)("h3",{id:"aggrstatsddsintfloat---record"},"aggr::stats::dds(int|float) -> record"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"size"),": Fixed, 10 Kilo Bytes (estimate based on ",(0,i.kt)("a",{parentName:"li",href:"https://arxiv.org/pdf/1908.10693.pdf"},"this paper"),")")),(0,i.kt)("p",null,"Uses a Distributed data-stream Sketch ( ",(0,i.kt)("a",{parentName:"p",href:"http://www.vldb.org/pvldb/vol12/p2195-masson.pdf"},"DDS (paper)")," Histogram to calculate count, min, max, mean and quartiles with quartile relative-error accurate over the range of points in the histogram. The DDS histogram trades off accuracy ( to a very low error and guaranteed low relative error ) and unlike HDR histograms does not need bounds specified."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-trickle"},'aggr::stats::dds(event.value, ["0.5","0.75","0.9","0.99","0.999"])\n')))}g.isMDXComponent=!0}}]);