"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[938],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(r),d=i,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(f,o(o({ref:t},u),{},{components:r})):n.createElement(f,o({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},774:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return u},default:function(){return m}});var n=r(87462),i=r(63366),a=(r(67294),r(3905)),o=["components"],l={},s="Circuit Breaker Mechanism",c={unversionedId:"implemented/circuit-breaker-mechanism",id:"implemented/circuit-breaker-mechanism",isDocsHomePage:!1,title:"Circuit Breaker Mechanism",description:"- Feature Name: rfc0005circuitbreakermechanism",source:"@site/rfc/implemented/0005-circuit-breaker-mechanism.md",sourceDirName:"implemented",slug:"/implemented/circuit-breaker-mechanism",permalink:"/rfc/implemented/circuit-breaker-mechanism",tags:[],version:"current",sidebarPosition:5,frontMatter:{},sidebar:"defaultSidebar",previous:{title:"Linked Transports",permalink:"/rfc/implemented/linked-transports"},next:{title:"Pipeline Optimisations",permalink:"/rfc/implemented/pipeline-optimizations"}},u=[{value:"Summary",id:"summary",children:[]},{value:"Motivation",id:"motivation",children:[]},{value:"Guide-level Explanation",id:"guide-level-explanation",children:[]},{value:"Reference-level Explanation",id:"reference-level-explanation",children:[]},{value:"Drawbacks",id:"drawbacks",children:[]},{value:"Rationale and Alternatives",id:"rationale-and-alternatives",children:[]},{value:"Prior Art",id:"prior-art",children:[]},{value:"Unresolved Questions",id:"unresolved-questions",children:[]},{value:"Future Possibilities",id:"future-possibilities",children:[]}],p={toc:u};function m(e){var t=e.components,r=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"circuit-breaker-mechanism"},"Circuit Breaker Mechanism"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Feature Name: rfc_0005_circuit_breaker_mechanism"),(0,a.kt)("li",{parentName:"ul"},"Start Date: 2020-01-27"),(0,a.kt)("li",{parentName:"ul"},"Issue: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/tremor-rs/tremor-rfcs/issues/8"},"tremor-rs/tremor-rfcs#0008")),(0,a.kt)("li",{parentName:"ul"},"RFC PR: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/tremor-rs/tremor-rfcs/pull/9"},"tremor-rs/tremor-rfcs#0009"))),(0,a.kt)("h2",{id:"summary"},"Summary"),(0,a.kt)("p",null,"The tremor-runtime supports events from three different basic origins:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Events are user-defined business data events that arrive ultimately via Onramps and depart ultimately via Oframps."),(0,a.kt)("li",{parentName:"ul"},"Signals are injected control events that are visible to operators and ramps."),(0,a.kt)("li",{parentName:"ul"},"Contraflow are injected control events that are visible to operators and ramps and travel in the contra-sense of primary flow.")),(0,a.kt)("p",null,"There is no mechanism to compensate for failures detected in externalising upstream or downstream components within the deployed graph of Tremor artefacts. The circuit-breaker operator defines an event protocol that standardises how failure detection signals, events and actions are communicated across the Tremor runtime."),(0,a.kt)("h2",{id:"motivation"},"Motivation"),(0,a.kt)("p",null,"The absence of a standard and uniform circuit breaker interface prohibits authors of tremor-script/tremor-query from writing compensating logic and behaviours that are adaptive to failures in the runtime environment. The circuit breaker operator separates the signals, events and actions that are implied by circuit breakers with an operator that allows circuit breaker events to be leveraged by user-defined logic in the tremor-runtime regardless of the point of origin of those signals, events and actions."),(0,a.kt)("h2",{id:"guide-level-explanation"},"Guide-level Explanation"),(0,a.kt)("p",null,"Definition of a circuit breaker with exponential backoff strategy and a rate-based failure detector:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-trickle"},'define qos::circuit_breaker operator cb\nwith\n    backoff = "exponential",\n    detector = "success_rate_over_time_window",\nend\n')),(0,a.kt)("p",null,"Application of a circuit breaker to external inbound events from an external non-reliable data source"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-trickle"},"create operator blue_smoke from cb;\n\nselect event from in into cb;\nselect event from cb/cb into out/cb;\n")),(0,a.kt)("p",null,"Circuit Breaker signals:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Circuit breaker opened."),(0,a.kt)("li",{parentName:"ul"},"Circuit breaker closed.")),(0,a.kt)("p",null,"Circuit breakers events:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Opened- The circuit breaker has transitioned from 'closed' to 'opened' for a named external endpoint."),(0,a.kt)("li",{parentName:"ul"},"Closed- The circuit braeker has transitioned from 'opened' to 'closed' for a named external endpoint.")),(0,a.kt)("h2",{id:"reference-level-explanation"},"Reference-level Explanation"),(0,a.kt)("p",null,"None"),(0,a.kt)("h2",{id:"drawbacks"},"Drawbacks"),(0,a.kt)("p",null,"None"),(0,a.kt)("h2",{id:"rationale-and-alternatives"},"Rationale and Alternatives"),(0,a.kt)("p",null,"The introduction of circuit breakers enables finer-grained control of compensating logic when external sources or sinks are detected as failed. The circuit breaker operator encapsulates runtime signals and contraflow so that circuit breakers can be used in user defined logic."),(0,a.kt)("h2",{id:"prior-art"},"Prior Art"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Circuit_breaker_design_pattern"},"Circuit Breaker Design Pattern"),"."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/crius"},"Crius"),"."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://crates.io/crates/failsafe"},"Failsafe"),"."),(0,a.kt)("h2",{id:"unresolved-questions"},"Unresolved Questions"),(0,a.kt)("p",null,"A related concern in the tremor-runtime is backoff handling for back-pressure in downstream systems ( eg: Influx, ElasticSearch ). These use contraflow to propagate context to a back-pressure operator."),(0,a.kt)("p",null,"There may be an opportunity to refactor the backpressure operator, separating our backoff handling logic. This should be considered by the implementor and this RFC updated accordingly."),(0,a.kt)("p",null,"This RFC does not specify internals or implementation which is left to the implementor. The motiviating example should be sufficient to drive a suitable implementation."),(0,a.kt)("h2",{id:"future-possibilities"},"Future Possibilities"),(0,a.kt)("p",null,"None known at this time."))}m.isMDXComponent=!0}}]);