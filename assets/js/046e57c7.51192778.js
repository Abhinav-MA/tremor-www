"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[2486],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return c}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=s(n),c=r,k=u["".concat(p,".").concat(c)]||u[c]||d[c]||i;return n?a.createElement(k,o(o({ref:t},m),{},{components:n})):a.createElement(k,o({ref:t},m))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},83138:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={id:"onramps",title:"Onramps"},p={unversionedId:"Artefacts/onramps",id:"Artefacts/onramps",isDocsHomePage:!1,title:"Onramps",description:"Specify how Tremor connects to the outside world in order to receive from external systems.",source:"@site/docs/Artefacts/onramps.md",sourceDirName:"Artefacts",slug:"/Artefacts/onramps",permalink:"/tremor-new-website/docs/Artefacts/onramps",editUrl:"https://github.com/tremor-rs/tremor-new-website/tree/main/docs/Artefacts/onramps.md",version:"current",frontMatter:{id:"onramps",title:"Onramps"},sidebar:"tutorialSidebar",previous:{title:"Offramps",permalink:"/tremor-new-website/docs/Artefacts/offramps"},next:{title:"Postprocessors",permalink:"/tremor-new-website/docs/Artefacts/postprocessors"}},s=[{value:"Delivery Properties",id:"delivery-properties",children:[]},{value:"Supported Onramps",id:"supported-onramps",children:[{value:"amqp",id:"amqp",children:[]},{value:"blaster",id:"blaster",children:[]},{value:"cb",id:"cb",children:[]},{value:"crononome",id:"crononome",children:[]},{value:"discord",id:"discord",children:[]},{value:"file",id:"file",children:[]},{value:"gsub",id:"gsub",children:[]},{value:"Kafka",id:"kafka",children:[]},{value:"metronome",id:"metronome",children:[]},{value:"nats",id:"nats",children:[]},{value:"PostgreSQL",id:"postgresql",children:[]},{value:"rest",id:"rest",children:[]},{value:"sse",id:"sse",children:[]},{value:"stdin",id:"stdin",children:[]},{value:"tcp",id:"tcp",children:[]},{value:"tcp example for TLS",id:"tcp-example-for-tls",children:[]},{value:"udp",id:"udp",children:[]},{value:"ws",id:"ws",children:[]}]}],m={toc:s};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"onramps"},"Onramps"),(0,i.kt)("p",null,"Specify how Tremor connects to the outside world in order to receive from external systems."),(0,i.kt)("p",null,"All Onramps support circuit breakers as in that no new events are read from it in the case of a\ncircuit breaker triggering."),(0,i.kt)("p",null,"For example, the Kafka onramp receives data from a Kafka cluster by creating a local record\nconsumer, connecting to a set of topics and ingesting Kafka record data."),(0,i.kt)("p",null,"All onramps are of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: <unique onramp id>\n    type: <onramp name>\n    preprocessors: # can be omitted\n      - <preprocessor 1>\n      - <preprocessor 2>\n      - ...\n    postprocessors: # only for linked transport, can be omitted\n      - <postprocessor 1>\n      - <postprocessor 2>\n      - ...\n    linked: <true or false> # enable linked transport, default: false\n    codec: <codec of the data>\n    codec_map:\n      "<mime-type>": <coded handling events of this mime-type>\n    config:\n      <key>: <value>\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/codecs"},(0,i.kt)("inlineCode",{parentName:"a"},"codec"))," field is optional and if not provided, will use onramps default codec."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"err_required")," field can be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the onramp should not start unless both ",(0,i.kt)("inlineCode",{parentName:"p"},"out")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"err")," ports are connected to at least one pipeline."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," contains a map (key-value pairs) specific to the onramp type."),(0,i.kt)("h2",{id:"delivery-properties"},"Delivery Properties"),(0,i.kt)("p",null,"Onramps are able to act upon both circuit breaker and guaranteed delivery events from the downstream pipelines. Those are triggered when event delivery is acknowledged or when event delivery fails. Also when some part (offramps, operators) signals itself being broken, the circuit breaker opens, or when the downstream system heals, the circuit breaker closes again, signaling it is safe to send further events. How each onramp reacts is described in the table below:"),(0,i.kt)("p",null,"The column ",(0,i.kt)("inlineCode",{parentName:"p"},"Delivery Acknowledgements")," describes when the onramp considers and reports the event delivered to the upstream it is connected to."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Onramp"),(0,i.kt)("th",{parentName:"tr",align:null},"Delivery Acknowledgements"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"amqp"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"blaster"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"cb"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"crononome"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"discord"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"file"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"gsub"),(0,i.kt)("td",{parentName:"tr",align:null},"always")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"kafka"),(0,i.kt)("td",{parentName:"tr",align:null},"always, only on ",(0,i.kt)("inlineCode",{parentName:"td"},"ack")," event if ",(0,i.kt)("inlineCode",{parentName:"td"},"enable.auto.commit")," is set to false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"metronome"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"nats"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"otel"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"PostgreSQL"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"rest"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"stdin"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"tcp"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"udp"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"ws"),(0,i.kt)("td",{parentName:"tr",align:null},"not supported")))),(0,i.kt)("h2",{id:"supported-onramps"},"Supported Onramps"),(0,i.kt)("h3",{id:"amqp"},"amqp"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"amqp")," onramp allows consuming events from an ",(0,i.kt)("a",{parentName:"p",href:"https://www.amqp.org"},"AMQP")," broker. It uses ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/lapin/1.6.8/lapin/"},"lapin")," for an AMQP 0.9.1 protocol implementation."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: amqp\n    type: amqp\n    config:\n      amqp_addr: "amqp://guest:guest@127.0.0.1:5672/"\n      queue_name: "my_queue"\n      queue_options:\n        passive: false\n        durable: false\n        exclusive: false\n        auto_delete: false\n        nowait: false\n      routing_key: "#"\n      exchange: ""\n')),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"amqp_addr")," - an AMQP URI. Format: String, required. For more details see ",(0,i.kt)("a",{parentName:"li",href:"https://www.rabbitmq.com/uri-spec.html"},"AMQP 0.9.1 URI spec"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exchange")," - Specifies the exchange to bind the configured queue to. Format: String, optional, Default: the empty string, the default exchange."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"routing_key")," - Specifies a routing key used when binding the configured queue to an exchange. Format: String, optional, Default: the empty string."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queue_name")," - The name of the queue to use/create for consuming messages. It will be bound to the configured ",(0,i.kt)("inlineCode",{parentName:"li"},"exchange")," with the given ",(0,i.kt)("inlineCode",{parentName:"li"},"routing_key"),". Format: String, required."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queue_options")," - Required Options to use when declaring the queue.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"passive")," - Declare the configured queue as ",(0,i.kt)("a",{parentName:"li",href:"https://www.rabbitmq.com/amqp-0-9-1-reference.html#queue.declare.passive"},(0,i.kt)("inlineCode",{parentName:"a"},"passive")),", if ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," do not auto-create the queue. Format: bool, Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"durable")," - Declare the configured queue as ",(0,i.kt)("a",{parentName:"li",href:"https://www.rabbitmq.com/amqp-0-9-1-reference.html#queue.declare.durable"},(0,i.kt)("inlineCode",{parentName:"a"},"durable")),", so it survives AMQP server restarts. Format: bool, Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"exclusive")," - Declare the configured queue as ",(0,i.kt)("a",{parentName:"li",href:"https://www.rabbitmq.com/amqp-0-9-1-reference.html#queue.declare.exclusive"},(0,i.kt)("inlineCode",{parentName:"a"},"exclusive"))," to this connection. Format: bool, Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"auto_delete")," - Declare the configured queue as ",(0,i.kt)("a",{parentName:"li",href:"https://www.rabbitmq.com/amqp-0-9-1-reference.html#queue.declare.auto-delete"},(0,i.kt)("inlineCode",{parentName:"a"},"auto-delete")),", deleting it if there are no consumers left. Format: bool, Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"nowait")," - Declare the configured queue with ",(0,i.kt)("a",{parentName:"li",href:"https://www.rabbitmq.com/amqp-0-9-1-reference.html#queue.declare.no-wait"},(0,i.kt)("inlineCode",{parentName:"a"},"nowait")),", do not wait for a reply from the server when declaring the queue. Format: bool, Default: ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")))),(0,i.kt)("p",null,"Upon onramp initialization, the specified ",(0,i.kt)("inlineCode",{parentName:"p"},"queue_name")," is ",(0,i.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/amqp-0-9-1-reference.html#queue.declare"},(0,i.kt)("inlineCode",{parentName:"a"},"declared"))," using ",(0,i.kt)("inlineCode",{parentName:"p"},"queue_options"),". It will be created if it doesn't exist yet. The queue is ",(0,i.kt)("a",{parentName:"p",href:"https://www.rabbitmq.com/amqp-0-9-1-reference.html#queue.bind"},(0,i.kt)("inlineCode",{parentName:"a"},"bound"))," to the named ",(0,i.kt)("inlineCode",{parentName:"p"},"exchange")," (emtpy string means the default exchange) with the given ",(0,i.kt)("inlineCode",{parentName:"p"},"routing_key")," (",(0,i.kt)("a",{parentName:"p",href:"https://www.cloudamqp.com/blog/part4-rabbitmq-for-beginners-exchanges-routing-keys-bindings.html"},"AMQP routing"),"). If the queue was not able to bind, the onramp will error upon initialization."),(0,i.kt)("p",null,"The current implementation uses ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/lapin/1.6.8/lapin/options/struct.QueueBindOptions.html"},"default queue bind options"),", i.e. ",(0,i.kt)("inlineCode",{parentName:"p"},"nowait = False"),", meaning the server reply is awaited before continuing."),(0,i.kt)("p",null,"Received messages are immediately acknowledged to the protocol stack. This Onramp does not wait for Guaranteed Delivery acknowledgements or fails."),(0,i.kt)("h3",{id:"blaster"},"blaster"),(0,i.kt)("p",null,"!!!note"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"This onramp is for benchmarking use, it should not be deployed in a live production system.\n")),(0,i.kt)("p",null,"The blaster onramp is built for performance testing, but it can be used for spaced-out replays of events as well. Files to replay can be ",(0,i.kt)("inlineCode",{parentName:"p"},"xz")," compressed. It will keep looping over the file."),(0,i.kt)("p",null,"The default ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/codecs#json"},"codec")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-blaster://<tremor-host.local>/<config_source_file>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source")," - The file to read from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"interval")," - The interval in which events are sent in nanoseconds."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"iters")," - Number of times the file will be repeated.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"onramp:\n  - id: blaster\n    type: blaster\n    codec: json\n    config:\n      source: ./demo/data/data.json.xz\n")),(0,i.kt)("h3",{id:"cb"},"cb"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"cb")," onramp is for testing how downstream pipeline and offramps issue circuit breaker events. It expects a circuit breaker event for each event it sent out, and then, the latest after the configured ",(0,i.kt)("inlineCode",{parentName:"p"},"timeout")," is exceeded, it exits the tremor process. If some events didn't receive circuit breaker events, it exits with status code ",(0,i.kt)("inlineCode",{parentName:"p"},"1"),"; if everything is fine, it exits with ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),"."),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source")," - The file to read from, expecting 1 event payload per line."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timeout")," - The time to wait for circuit breaker events in milliseconds. If this timeout is exceeded, the tremor process is terminated. (Default: 10000 ms)")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"onramp:\n  - id: cb_test\n    type: cb\n    codec: json\n    config:\n      source: in.json\n      timeout: 1000\n")),(0,i.kt)("h3",{id:"crononome"},"crononome"),(0,i.kt)("p",null,"This sends a scheduled tick down the offramp. Schedules can be one-off or repeating and use a cron-like format."),(0,i.kt)("p",null,"Multiple cron entries can be configured, each with a symbolic name and an optional JSON payload in addition to the cron expression."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-crononome://<tremor-host.local>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entries")," - A sequence of entries.")),(0,i.kt)("p",null,"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: crononome\n    type: crononome\n    codec: json\n    config:\n      entries:\n        ## every second\n        - name: 1s\n          expr: "* * * * * *"\n        ## every 5 seconds\n        - name: 5s\n          expr: "0/5 * * * * *"\n        ## every minute\n        - name: 1m\n          expr: "0 * * * * *"\n          payload:\n            snot: badger\n')),(0,i.kt)("p",null,"Cron entries that are historic or in the past ( relative to the current UTC time ) will be ignored.\nCron entries beyond 2038 will not work due to underlying libraries ( ",(0,i.kt)("inlineCode",{parentName:"p"},"rust"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"chrono"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"cron.rs")," ) suffering\nfrom the ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Year_2038_problem"},"year 2038 problem"),"."),(0,i.kt)("p",null,"The data looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "onramp": "crononome",\n  "ingest_ns": 12345, // the time\n  "id": 42,\n  "name": "the name of the trigger",\n  "payload": ["the", "configured", "payload", "perhaps"],\n  "trigger": {"the": "trigger"}\n}\n')),(0,i.kt)("h3",{id:"discord"},"discord"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"This onramp can be linked")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"discord")," onramp allows consuming events from the ",(0,i.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/intro"},"Discord API"),". It uses the event structure as provided by ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/serenity/0.10.2/serenity/"},"serenity")," wrapped in event-named records."),(0,i.kt)("p",null,"Replies sent to this onramp can perform multiple operations:"),(0,i.kt)("h4",{id:"guild-related"},"Guild related"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "guild": {\n    "id": 1234, // guild id, required\n    // member section required\n    "member": {\n      "id": 2345, // member id, required\n\n      // Roles to remove, optional\n      "remove_roles": [\n        3456 // ... role ids\n      ],\n      // Roles to add, optional\n      "add_roles": [\n        4567 // ... role ids\n      ],\n      "deafen": true, // (un)deafen the member, optional\n      "mute": true // (un)deafen the member, optional\n    }\n  }\n}\n')),(0,i.kt)("h4",{id:"message-related"},"Message related"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{"message": {\n  "channel_id": 1234, // channel id, required\n  // Update message section, optional\n  "update": {\n    "message_id": 2345, // message id to update, required\n    // Reactions to add\n    "add_reactions": [\n      "\ud83d\ude00", // emoji reaction\n      {  // custom reaction\n        "id": 3456, // emoji id, required\n        "name": "seal-of-approval" // emoji name, optional\n        "animated": true, // animated, optional\n       }\n       // ...\n    ],\n  },\n  // Send section, optional\n  "send": {\n    "content": "hello!", // message content, optional,\n    "reference_message": 4567, // Reference to other message, optional\n    "reference_channel": 5678, // reference channel, optional, default is `channel_id` (ignored w/o `reference_message`)\n    "tts": false, // use text to speech, optional\n    // Embed section, optional\n    "embed": {\n\n      // Author section, optional\n      "author": {\n        "icon_url": "https://...", // url of the author icon, optional\n        "name": "Snottus Badgerus", // name of the author, optional\n        "url": "https://...", // url of the author profile, optional\n      },\n      "colour": 0, // color (as number) of the embed, optional (hint: use hex in tremor script it makes it easier)\\\n      "description": "This is an embed", // A description for the embed, optional\n      // Embedded fields, optional\n      "fields": [\n        {\n          "name": "field 1", // name of the field, required\n          "value": "explenation", // \'body\' of the field, required\n          "inline": true, // if the field should be inlined, optional, default: false\n        }\n        // ...\n      ],\n      "footer": "look at my feet!", // simple footer, optional\n      // Footer section, optional, alternative to simple footer\n      "footer": {\n        "text": "look at my feet!", // footer text, optional\n        "icon_url": "https://...", // footer icon, optional\n      }\n    },\n    // Reactions to add\n    "reactions": [\n      "\ud83d\ude00", // emoji reaction\n      {  // custom reaction\n        "id": 3456, // emoji id, required\n        "name": "seal-of-approval" // emoji name, optional\n        "animated": true, // animated, optional\n       }\n       // ...\n    ],\n  }\n}}\n')),(0,i.kt)("h3",{id:"file"},"file"),(0,i.kt)("p",null,"The file onramp reads the content of a file, line by line, and sends each line as an event. It has the ability to shut down the system upon completion. Files can be ",(0,i.kt)("inlineCode",{parentName:"p"},"xz")," compressed."),(0,i.kt)("p",null,"The default ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/codecs#json"},"codec")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-file://<tremor-host.local>/<config_source_file>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source")," - The file to read from."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"close_on_done")," - Terminates tremor once the file is processed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"sleep_on_done")," - Waits for the given number of milliseconds before terminating tremor. Intended to be used with ",(0,i.kt)("inlineCode",{parentName:"li"},"close_on_done"),".")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"onramp:\n  - id: in\n    type: file\n    config:\n      source: /my/path/to/a/file.json\n      close_on_done: true\n      sleep_on_done: 1000 # wait for a second before terminating\n")),(0,i.kt)("h3",{id:"gsub"},"gsub"),(0,i.kt)("p",null,"Google Cloud Pubsub - Subscriber"),(0,i.kt)("p",null,"This onramp can issue basic operation of receiving messages from a subscription."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The onramp is experimental."))),(0,i.kt)("p",null,"This onramp assumes that the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"GOOGLE_APPLICATION_CREDENTIALS")," has been exported to the execution environment and it has been configured to point to a valid non-expired service account token json file."),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"pem")," - The pem file from GCP for authentication."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"subscription")," - The subscription name which is linked to a topic to receive messages.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: gsub\n    type: gsub\n    codec: json\n    preprocessors:\n      - gzip\n    config:\n      pem: gcp.pem\n      subscription: "tremor-sub"\n')),(0,i.kt)("p",null,"We get the meta data as response that includes the message id and the acknowledgement id of the message. Configure the inbound trickle file to display the metadata received."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Response"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "data": {\n    "hello": "folks!!"\n  },\n  "meta": {\n    "message_id": "<message-id>",\n    "acknowledgement_id": "<acknowledgement_id>"\n  }\n}\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Where"))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<data>")," - The data received as message."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<message-id>")," - The message id assigned by the Google Cloud Pubsub api."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"<acknowledgement_id>")," - The acknowedgement id assigned by the Google Cloud Pubsub api.")),(0,i.kt)("h3",{id:"kafka"},"Kafka"),(0,i.kt)("p",null,"The Kafka onramp connects to one or more Kafka topics. It uses ",(0,i.kt)("inlineCode",{parentName:"p"},"librdkafka")," to handle connections and can use the full set of ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/edenhill/librdkafka/blob/v1.5.0/CONFIGURATION.md"},"librdkafka 1.5.0 configuration options"),"."),(0,i.kt)("p",null,"The default ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/codecs#json"},"codec")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-kafka://<config_first_broker_host>[:<config_first_broker_port>]/<topic>/<partition>/<offset>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"group_id")," - The Kafka consumer group id to use."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"topics")," - A list of topics to subscribe to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"brokers")," - Broker servers to connect to. (Kafka nodes)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"rdkafka_options")," - An optional map of an option to value, where both sides need to be strings."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"retry_failed_events")," - If set to ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),", the source will ",(0,i.kt)("strong",{parentName:"li"},"not")," seek back the consumer offset upon failed events, and thus not retry those when ",(0,i.kt)("inlineCode",{parentName:"li"},"enable.auto.commit")," is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"false")," in ",(0,i.kt)("inlineCode",{parentName:"li"},"rdkafka_options"),". (default ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"poll_interval")," - Duration in milliseconds to wait until we poll again if no message is in the kafka queue. (default: ",(0,i.kt)("inlineCode",{parentName:"li"},"100"),")")),(0,i.kt)("p",null,"Set metadata variables are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$kafka")," - Record consisting of two optional keys: - ",(0,i.kt)("inlineCode",{parentName:"li"},"headers"),": A record denoting the ",(0,i.kt)("a",{parentName:"li",href:"https://kafka.apache.org/20/javadoc/index.html?org/apache/kafka/connect/header/Header.html"},"headers")," for the message (if any). - ",(0,i.kt)("inlineCode",{parentName:"li"},"key"),": The key used for this message in bytes (if any). - ",(0,i.kt)("inlineCode",{parentName:"li"},"topic"),": The topic the message was on (if any). - ",(0,i.kt)("inlineCode",{parentName:"li"},"offset"),": The offset in the partition the message was on (if any). - ",(0,i.kt)("inlineCode",{parentName:"li"},"partition"),": The partition the message was on (if any). - ",(0,i.kt)("inlineCode",{parentName:"li"},"timestamp"),": The timestamp provided by ",(0,i.kt)("inlineCode",{parentName:"li"},"kafka")," in milliseconds (if any).\nExample:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"onramp:\n  - id: kafka-in\n    type: kafka\n    codec: json\n    config:\n      brokers:\n        - kafka:9092\n      topics:\n        - demo\n        - snotbadger\n      group_id: demo\n")),(0,i.kt)("p",null,"A more involved example, only committing on successful circuit breaker event and not retrying failed events, while also decreasing the poll interval to 10ms to get notified of new messages faster:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: involved-kafka\n    type: kafka\n    codec: msgpack\n    preprocessors:\n      - lines\n    config:\n      brokers:\n        - kafka01:9092\n        - kafka02:9092\n      topics:\n        - my_topic\n      group_id: my_group_id\n      retry_failed_events: false\n      poll_interval: 10\n      rdkafka_options:\n        "enable.auto.commit": false\n')),(0,i.kt)("h4",{id:"semantics-with-enableautocommit"},"Semantics with ",(0,i.kt)("inlineCode",{parentName:"h4"},"enable.auto.commit")),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"enable.auto.commit: false")," is set in ",(0,i.kt)("inlineCode",{parentName:"p"},"rdkafka_options"),", the consumer offset in kafka will only be committed when the event has successfully reached the other end of the pipeline (typically some ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/offramps#offramps"},"offramp")," ).\nIf an event failed during processing within the pipeline or at a downstream offramp, the consumer offset will be reset to the offset of the failed event, so it will be retried. This has some consequences worth mentioning:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Already processed ",(0,i.kt)("inlineCode",{parentName:"li"},"kafka")," messages (that have succeeded before the failed message failed) might be seen again multiple times."),(0,i.kt)("li",{parentName:"ul"},"If the message is persistently failing (e.g. due to an malformed payload or similar), tremor will retry those messages infinitely.")),(0,i.kt)("p",null,"If persistent failures are to be expected (e.g. due to incorrect event payloads), or if repeating messages in general are a problem for the application, avoiding retries with ",(0,i.kt)("inlineCode",{parentName:"p"},"retry_failed_events: false")," is advised."),(0,i.kt)("p",null,"If ",(0,i.kt)("inlineCode",{parentName:"p"},"enable.auto.commit: true")," is set in ",(0,i.kt)("inlineCode",{parentName:"p"},"rdkafka_options"),", which is the default behaviour if nothing is specified, the offset is immediately committed upon event reception in tremor, regardless of success or failure of processing the ",(0,i.kt)("inlineCode",{parentName:"p"},"kafka")," message as event in tremor."),(0,i.kt)("h3",{id:"metronome"},"metronome"),(0,i.kt)("p",null,"This sends a periodic tick downstream. It is an excellent tool to generate some test traffic to validate pipelines."),(0,i.kt)("p",null,"The default ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/codecs#pass"},"codec")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"pass")," (since we already output decoded JSON)."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-metronome://<tremor-host.local>/<config_interval>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"interval")," - The interval in which events are sent in milliseconds.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"onramp:\n  - id: metronome\n    type: metronome\n    config:\n      interval: 10000\n")),(0,i.kt)("p",null,"The data looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "onramp": "metronome",\n  "ingest_ns": 12345, // time\n  "id": 42\n}\n')),(0,i.kt)("h3",{id:"nats"},"nats"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"nats")," onramp connects to Nats server(s) and subscribes to a specified subject."),(0,i.kt)("p",null,"The default ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/codecs#json"},"codec")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-nats://<config_first_host_host_addr>[:<config_first_host_port>]/<subject>\n")),(0,i.kt)("p",null,"Supported configuration operations are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hosts")," - List of hosts to connect to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"subject")," - Subject to subscribe to for listening to messages."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"queue")," - Optional queue to subscribe to."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"options")," - Optional struct, which can be used to customize the connection to the server (see ",(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/nats/0.9.8/nats/struct.Options.html"},(0,i.kt)("inlineCode",{parentName:"a"},"nats.rs")," configuration options")," for more info):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"token"),": String; authenticate using a token."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"username"),": String; authenticate using a username and password."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password"),": String; authenticate using a username and password."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"credentials_path"),": String; path to a ",(0,i.kt)("inlineCode",{parentName:"li"},".creds")," file for authentication."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cert_path"),": String; path to the client certificate file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key_path"),": String; path to private key file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": String; name this configuration."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"echo"),": Boolean; if true, published messages will not be delivered."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"max_reconnects"),": Integer; max number of reconnection attempts."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"reconnect_buffer_size"),": Integer; max amount of bytes to buffer when accepting outgoing traffic in disconnected mode."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tls"),": Boolean; if true, sets tls for ",(0,i.kt)("em",{parentName:"li"},"all")," server connections."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"root_cert"),": String; path to a root certificate.")))),(0,i.kt)("p",null,"Set metadata variables are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"$nats"),": Record consisting of the following metadata:"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$reply"),": Reply associated with the message (if any)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$headers"),": Record denoting the headers for the message (if any).")))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: nats-in\n    type: nats\n    config:\n      hosts:\n        - "127.0.0.1:4444"\n      subject: demo\n      queue: stack\n      options:\n        name: nats-demo\n        reconnect_buffer_size: 1\n')),(0,i.kt)("h3",{id:"postgresql"},"PostgreSQL"),(0,i.kt)("p",null,"PostgreSQL onramp."),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," - PostgreSQL database hostname."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," - PostgresSQL database port."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user")," - Username for authentication."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," - Password for authentication."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dbname")," - Database name."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query")," - Query run to retrieve data."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"interval_ms")," - Query interval in milliseconds."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cache")," - Location (",(0,i.kt)("inlineCode",{parentName:"li"},"path"),") and size (",(0,i.kt)("inlineCode",{parentName:"li"},"size"),") for caching of latest successful query interval.")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"query")," must include two arguments to be filled with start and end interval timestamps."),(0,i.kt)("p",null,"Data will come out of onramp in objects representing columns. If schema\nspecifies there are two fields, ",(0,i.kt)("inlineCode",{parentName:"p"},"username")," (",(0,i.kt)("inlineCode",{parentName:"p"},"VARCHAR"),") and ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at"),"\n(",(0,i.kt)("inlineCode",{parentName:"p"},"TIMESTAMPTZ"),"), then the actual JSON coming out of onramp looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'"username": {\n  "fieldType": "VARCHAR",\n  "name": "username",\n  "value": "actual\\_username"\n},\n"created\\_at": {\n  "fieldType": "TIMESTAMPTZ",\n  "name": "created\\_at",\n  "value": "2020-04-04 00:00:00.000000 +00:00"\n}\n')),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'id: db\ntype: postgres\ncodec: json\nconfig:\n  host: localhost\n  port: 5432\n  user: postgres\n  password: example\n  dbname: sales\n  query: "SELECT id, name from events WHERE produced_at <= $1 AND produced_at > $2"\n  interval_ms: 1000\n  cache:\n    path: "/path/to/cache.json"\n    size: 4096\n')),(0,i.kt)("h3",{id:"rest"},"rest"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"This onramp can be linked")),(0,i.kt)("p",null,"The rest onramp listens on a specified port for inbound RESTful ( http ) data, treating the decoded and preprocessed http body as event data (and attaching other request attributes as event metadata)."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-rest://<tremor-rest-client-host.remote>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," - The host to advertise as."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," - The TCP port to listen on.")),(0,i.kt)("p",null,"The rest onramp respects the HTTP ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type"},"Content-Type header")," and will use it to decode the request body when it's present (otherwise, it defaults to using the codec specified in the onramp config)."),(0,i.kt)("p",null,"Tremor supports a limited set of built-in codecs used for well known MIME types (e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"application/json"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"application/yaml"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"text/plain"),"). In order to customize how certain ",(0,i.kt)("inlineCode",{parentName:"p"},"Content-Type"),"s are handled, provide a ",(0,i.kt)("inlineCode",{parentName:"p"},"codec_map")," providing a mapping from MIME type to Tremor codec in the top level artefact config (where the ",(0,i.kt)("inlineCode",{parentName:"p"},"codec")," is set)."),(0,i.kt)("p",null,"Set metadata variables:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$request")," - A record capturing the HTTP request attributes. Available fields within:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url")," - A record with the following standard URL fields (optional fields might not be present):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scheme")," - String, typically ",(0,i.kt)("inlineCode",{parentName:"li"},"http")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"username")," - String, optional"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"password")," - String, optional"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," - String"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," - number, optional, absence means ",(0,i.kt)("inlineCode",{parentName:"li"},"80")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path")," - String"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"query")," - String, optional"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"fragment")," - String, optional"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"method")," - HTTP method used by the incoming request."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headers")," - A record that maps header name (lowercase string) to values (array of strings).")))),(0,i.kt)("p",null,"Used metadata variables:"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"These variables can be used to dynamically change how responses are handled when using this onramp as ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Operations/linked-transports"},"linked transport"),":")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$response")," - A record capturing the HTTP response attributes. Available fields within:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"status")," - Numeric HTTP status code. (optional. status code defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"200")," when not set)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headers")," - A record that maps header name (string) to value (string or array of strings) (optional).")))),(0,i.kt)("p",null,"When not used as a linked onramp, the status code returned with the response is ",(0,i.kt)("inlineCode",{parentName:"p"},"202"),"."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: rest\n    type: rest\n    preprocessors:\n      - lines\n    codec: json\n    codec_map:\n      "text/html": "string"\n    config:\n      host: "localhost"\n      port: 9000\n')),(0,i.kt)("p",null,"Known limitations:"),(0,i.kt)("p",null,"It is currently not possible to configure rest onramps via swagger, RAML or OpenAPI configuration files."),(0,i.kt)("h3",{id:"sse"},"sse"),(0,i.kt)("p",null,"The SSE (Server Sent Events) onramp subscribes to an sse endpoint treating ",(0,i.kt)("inlineCode",{parentName:"p"},"sse-event-data")," as the event data."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-sse://<tremor-host.local>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"url")," - The sse endpoint to subscribe."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"headers")," - A map of headers to set for the requests, where both sides are strings. (optional)")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: sse\n    type: sse\n    config:\n      url: "http://localhost:8000/sse"\n      header:\n       "Client": "Tremor"\n')),(0,i.kt)("h3",{id:"stdin"},"stdin"),(0,i.kt)("p",null,"An onramp that takes input from ",(0,i.kt)("inlineCode",{parentName:"p"},"stdin"),"."),(0,i.kt)("p",null,"The default ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/codecs#string"},"codec")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-stdin://<tremor-host.local>\n")),(0,i.kt)("h3",{id:"tcp"},"tcp"),(0,i.kt)("p",null,"This listens on a specified port for inbound tcp data. TLS is supported."),(0,i.kt)("p",null,"The onramp can leverage preprocessors to segment data before codecs are applied and events are forwarded\nto pipelines."),(0,i.kt)("p",null,"The default ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/codecs#json"},"codec")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"json"),"."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-tcp://<client_ip>:<client_port>/<config_server_port>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," - The IP to listen on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," - The Port to listen on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tls")," - The TLS config for receiving messages via TCP/TLS. If provided, this onramp expects TLS traffic.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cert")," - The server certificate (or certificate chain) PEM file (X.509 certificate). Required for TLS."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"key")," - The private Key PEM file (RSA or PKCS8 format). Required for TLS.")))),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: tcp\n    type: tcp\n    preprocessors:\n      - base64\n      - lines\n    codec: json\n    config:\n      host: "127.0.0.1"\n      port: 9000\n')),(0,i.kt)("h4",{id:"tcp-onramp-example-for-gelf"},"tcp onramp example for ",(0,i.kt)("a",{parentName:"h4",href:"https://docs.graylog.org/en/latest/pages/gelf.html#gelf-via-tcp"},"GELF")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: gelf-tcp\n    type: tcp\n    preprocessors:\n      - lines-null\n    codec: json\n    config:\n      host: "127.0.0.1"\n      port: 12201\n')),(0,i.kt)("h3",{id:"tcp-example-for-tls"},"tcp example for TLS"),(0,i.kt)("p",null,"If the ",(0,i.kt)("inlineCode",{parentName:"p"},"tls")," config is provided, this onramp acts as a TCP/TLS server and expects SSL/TLS traffic from clients:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: tls\n    type: tcp\n    preprocessors:\n      - lines\n    codec: string\n    config:\n      host: "127.0.0.1"\n      port: 65535\n      tls:\n        cert: "path/to/cert.pem"\n        key: "path/to/key.pem"\n')),(0,i.kt)("h3",{id:"udp"},"udp"),(0,i.kt)("p",null,"The UDP onramp allows receiving data via UDP datagrams."),(0,i.kt)("p",null,"The default ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Artefacts/codecs#string"},"codec")," is ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-udp://<sender_ip>:<sender_port>/<config_receive_port>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," - The IP to listen on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," - The Port to listen on.")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: udp\n    type: udp\n    codec: json\n    config:\n      host: "127.0.0.1"\n      port: 9000\n')),(0,i.kt)("h4",{id:"udp-onramp-example-for-gelf"},"udp onramp example for ",(0,i.kt)("a",{parentName:"h4",href:"https://docs.graylog.org/en/latest/pages/gelf.html#gelf-via-udp"},"GELF")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: gelf-udp\n    type: udp\n    preprocessors:\n      - decompress\n      - gelf-chunking\n      - decompress\n    codec: json\n    config:\n      host: "127.0.0.1"\n      port: 12201\n')),(0,i.kt)("h4",{id:"udp-onramp-example-for-syslog"},"udp onramp example for ",(0,i.kt)("a",{parentName:"h4",href:"../codecs.md#syslog"},"syslog")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: syslog-udp\n    type: udp\n    codec: syslog\n    config:\n      host: "127.0.0.1"\n      port: 12201\n')),(0,i.kt)("h3",{id:"ws"},"ws"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"This onramp can be linked")),(0,i.kt)("p",null,"WebSocket onramp. Receiving either binary or text packages from a WebSocket connection. the url is: ",(0,i.kt)("inlineCode",{parentName:"p"},"ws://<host>:<port>/"),"."),(0,i.kt)("p",null,"The event ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/stdlib/tremor/origin"},"origin URI")," set by the onramp is of the form:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"tremor-ws://<tremor-ws-client-host.remote>\n")),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," - The IP to listen on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," - The Port to listen on.")),(0,i.kt)("p",null,"Set metadata variables:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$binary")," - ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if the incoming WebSocket message came as binary (",(0,i.kt)("inlineCode",{parentName:"li"},"false")," otherwise).")),(0,i.kt)("p",null,"Used metadata variables (for reply with ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/Operations/linked-transports"},"linked transports"),"):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"$binary")," - If reply data should be sent as binary instead of text (optional. data format defaults to text when not set).")),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'onramp:\n  - id: ws\n    type: ws\n    codec: json\n    config:\n      port: 12201\n      host: "127.0.0.1"\n')),(0,i.kt)("h1",{id:"otel"},"otel"),(0,i.kt)("p",null,"CNCF OpenTelemetry onramp. Listens on TCP port ",(0,i.kt)("inlineCode",{parentName:"p"},"4317")," for gRPC traffic conforming to the CNCF OpenTelemetry protocol specification.\nForwards tremor value variants of ",(0,i.kt)("inlineCode",{parentName:"p"},"logs"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"trace")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"metrics")," messages."),(0,i.kt)("p",null,"The onramp is experimental."),(0,i.kt)("p",null,"Supported configuration options are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"host")," - String - The host or IP to listen on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port")," - integer - The TCP port to listen on."),(0,i.kt)("li",{parentName:"ul"},"'logs' - boolean - Is logging enabled for this instance? Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),". Received ",(0,i.kt)("inlineCode",{parentName:"li"},"logs")," events are dropped when ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},"'metrics' - boolean - Is metrics enabled for this instance? Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),". Received ",(0,i.kt)("inlineCode",{parentName:"li"},"metrics")," events are dropped when ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"."),(0,i.kt)("li",{parentName:"ul"},"'trace' - boolean - Is trace enabled for this instance? Defaults to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),". Received ",(0,i.kt)("inlineCode",{parentName:"li"},"trace")," events are dropped when ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,i.kt)("p",null,"Pipelines that leverage the OpenTelemetry integration can use utility modules in the ",(0,i.kt)("inlineCode",{parentName:"p"},"cncf::otel")," module to\nsimplify working with the tremor value mapping of the event data. The connector translates the wire level\ndata from protocol buffers to tremor values automatically."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"onramp:\n  - id: otlp\n    type: otel\n    codec: json\n    config:\n      port: 4317\n      host: 127.0.0.1\n")))}d.isMDXComponent=!0}}]);