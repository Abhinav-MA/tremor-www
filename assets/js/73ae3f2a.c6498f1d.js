"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[5851],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(67294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(r),f=i,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||o;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var s=2;s<o;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},9718:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var n=r(87462),i=r(63366),o=(r(67294),r(3905)),a=["components"],c={},l="trace_id",s={unversionedId:"tremor-script/stdlib/cncf/otel/trace_id",id:"tremor-script/stdlib/cncf/otel/trace_id",isDocsHomePage:!1,title:"trace_id",description:"Trace Identifiers",source:"@site/docs/tremor-script/stdlib/cncf/otel/trace_id.md",sourceDirName:"tremor-script/stdlib/cncf/otel",slug:"/tremor-script/stdlib/cncf/otel/trace_id",permalink:"/docs/next/tremor-script/stdlib/cncf/otel/trace_id",editUrl:"https://github.com/tremor-rs/tremor-www/tree/main/docs/tremor-script/stdlib/cncf/otel/trace_id.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"status",permalink:"/docs/next/tremor-script/stdlib/cncf/otel/trace/status"},next:{title:"std",permalink:"/docs/next/tremor-script/stdlib/std"}},u=[{value:"Functions",id:"functions",children:[{value:"is_valid(trace_id)",id:"is_validtrace_id",children:[]}]}],d={toc:u};function p(e){var t=e.components,r=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"trace_id"},"trace_id"),(0,o.kt)("p",null,"Trace Identifiers"),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"is_validtrace_id"},"is_valid(trace_id)"),(0,o.kt)("p",null,"Is the ",(0,o.kt)("inlineCode",{parentName:"p"},"trace_id")," valid"),(0,o.kt)("p",null,"Checks the ",(0,o.kt)("inlineCode",{parentName:"p"},"trace_id")," argument to see if it is a valid\ntrace id. A legal trace id is one of:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"An array of integers in the range of ","[0..=255]"," of length 8"),(0,o.kt)("li",{parentName:"ul"},"A binary 16 byte value"),(0,o.kt)("li",{parentName:"ul"},"A 32-byte hex-encoded string"),(0,o.kt)("li",{parentName:"ul"},"An array of 16 int values"),(0,o.kt)("li",{parentName:"ul"},"Regardless of representation, the value must not be all zeroes")),(0,o.kt)("p",null,"Returns a record when the representation is well-formed of the form:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tremor"},'{\n"kind": "string"|"binary"|"array", # Depends on input\n"valid": true|false,               # True if well-formed and valid\n"value": "<trace_id>"              # Representation depends on `kind`\n}\n')),(0,o.kt)("p",null,"Returns an empty record ",(0,o.kt)("inlineCode",{parentName:"p"},"{}")," when the representation not well-formed"))}p.isMDXComponent=!0}}]);