"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[9950],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return u}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(t),u=a,f=d["".concat(s,".").concat(u)]||d[u]||m[u]||i;return t?r.createElement(f,o(o({ref:n},c),{},{components:t})):r.createElement(f,o({ref:n},c))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5729:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=t(7462),a=t(3366),i=(t(7294),t(3905)),o=["components"],l={},s={unversionedId:"Operations/configuration",id:"Operations/configuration",isDocsHomePage:!1,title:"Configuring Tremor",description:"This is a short canned synopsis of tremor configuration.",source:"@site/docs/Operations/configuration.md",sourceDirName:"Operations",slug:"/Operations/configuration",permalink:"/tremor-new-website/docs/Operations/configuration",editUrl:"https://github.com/tremor-rs/tremor-new-website/tree/main/docs/Operations/configuration.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuration Walkthrough",permalink:"/tremor-new-website/docs/Operations/configuration-walkthrough"},next:{title:"Circuit Breakers and Guaranteed Delivery",permalink:"/tremor-new-website/docs/Operations/gdcb"}},p=[{value:"Introduction",id:"introduction",children:[]},{value:"Deployment Types",id:"deployment-types",children:[]},{value:"Using the docker image",id:"using-the-docker-image",children:[]},{value:"Static or Bootstrap deployments",id:"static-or-bootstrap-deployments",children:[]},{value:"Interactive or Operational deployments",id:"interactive-or-operational-deployments",children:[]}],c={toc:p};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"This is a short canned synopsis of tremor configuration."),(0,i.kt)("p",null,"Tremor supports dynamic reconfiguration since v0.4."),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"The tremor runtime is internally structured with repositories and registries of configurable elements or artefacts. These artefacts can be one of:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Onramp - Specify to tremor ",(0,i.kt)("em",{parentName:"p"},"how")," to connect to the outside world to ingest or consume external data. For example, the Kafka onramp consumes data from Kafka topics.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Offramp - Specify to tremor ",(0,i.kt)("em",{parentName:"p"},"how")," to connect to the outside world to publish data to external systems For example, the Elastic offramp pushes data to ElasticSearch via its bulk upload REST/HTTP API endpoint")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Pipeline - Specify to tremor ",(0,i.kt)("em",{parentName:"p"},"what")," operations to perform on data ingested ( from any connected upstream source ) and ",(0,i.kt)("em",{parentName:"p"},"what")," to contribute or publish downstream ( to any connected downstream target ).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Binding - A binding is a specification of how to interconnect Onramps, Offramps and Pipelines. Binding specifications can be thought of a type of wiring harness")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Mapping - A mapping instantiated multiple bindings and fills in template variables."))),(0,i.kt)("p",null,"Specifications for onramps, offramps, pipelines and bindings in tremor should be considered templates. They are stored in an internal tremor ",(0,i.kt)("em",{parentName:"p"},"repository"),". A tremor repository stores artefacts, much like git repositories code."),(0,i.kt)("p",null,"Live onramps, offramps and pipelines in tremor are in a runnable state. They consume typically network bandwidth and some compute in the case of onramps and offramps. They consume compute bandwidth in the case of pipelines."),(0,i.kt)("p",null,"In order to create live instances of onramps, offramps and pipelines, a binding must be ",(0,i.kt)("em",{parentName:"p"},"deployed"),". This is done by specifying a ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping")," which consists of a mapping from binding instance url to the template values to fill in placeholders in the Binding specification. For each entry in the ",(0,i.kt)("inlineCode",{parentName:"p"},"mapping")," a binding instance is created and all referenced connected onramps, pipelines and offramps are instantiated with it."),(0,i.kt)("p",null,"Live ",(0,i.kt)("em",{parentName:"p"},"instances")," of tremor artefacts are stored in a ",(0,i.kt)("em",{parentName:"p"},"registry"),". A tremor registry can be thought of similarly to the Domain Name Service or DNS."),(0,i.kt)("p",null,"All 'live' or 'deployed' instances in tremor ( onramps, offramps, pipelines ) are managed by a finite state machine."),(0,i.kt)("h2",{id:"deployment-types"},"Deployment Types"),(0,i.kt)("p",null,"In this section we explore the two basic types of deployment in tremor."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-text"},'\n+------------+      "publish"      +--------------+     "bind/deploy"     +--------------+\n|            +--------------------\x3e+              +----------------------\x3e+              |\n|            |                     |              |                       |              |\n|  Artefact  |   onramp, pipeline  |   Artefact   |       mapping         |  Instance    |\n|            |   offramp, binding  |  Repository  |                       |  Registry    |\n|            |                     |              |                       |              |\n|            +<--------------------+              +<----------------------+              |\n+------------+       "find"        +--------------+    "unbind/undeploy"  +--------------+\n\n')),(0,i.kt)("p",null,"Tremor leverages the registry/repository and publish-find-bind Service Oriented Architecture patterns to drive its configuration model. Onramp, Offramp and Pipeline configurations can be published as template specifications along with how they should be interconnected as binding specifications."),(0,i.kt)("p",null,"As all artefacts in tremor are named, when a mapping is published, it deploys all the required onramps, offramps and pipelines automatically. This also means that when a mapping is deleted, that the corresponding live instances are undeployed."),(0,i.kt)("p",null,"All live or running artefacts have a corresponding state machine that manages its deployment lifecycle. The FSM is a simplified version of the POA worker activator lifecycle from CORBA and other Application Server Platforms."),(0,i.kt)("h2",{id:"using-the-docker-image"},"Using the docker image"),(0,i.kt)("p",null,"When using the tremor docker image configuration is loaded from the folder ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/tremor")," this folder should be mounted into the docker container to propagate the data."),(0,i.kt)("p",null,"The following files are looked for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/etc/tremor/logger.yaml")," a ",(0,i.kt)("a",{parentName:"li",href:"https://docs.rs/log4rs/*/log4rs/"},"log4rs")," configuration file to control logging in tremor."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/etc/tremor/config/")," : All ",(0,i.kt)("inlineCode",{parentName:"li"},"*.trickle")," files in this directory and its subdirectories will be loaded as trickle pipelines - trickle pipelines are always loaded before yaml configuration! The file name in this case (the part before ",(0,i.kt)("inlineCode",{parentName:"li"},".trickle"),") is the pipeline id which you can use in places like the binding configuration. The ",(0,i.kt)("inlineCode",{parentName:"li"},'#!config id = "name"')," preprocessor directive can be used to overwrite the naming."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/etc/tremor/config/"),": All ",(0,i.kt)("inlineCode",{parentName:"li"},"*.yml")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"*.yaml")," files will be loaded as configuration files and evaluated in order (so mappings cannot refer to artefacts in later files!) - NOTE: defining pipelines in yaml is deprecated and trickle pipelines should be used.")),(0,i.kt)("p",null,"By default tremor is looking into ",(0,i.kt)("inlineCode",{parentName:"p"},"/usr/local/share/tremor")," for custom ",(0,i.kt)("inlineCode",{parentName:"p"},"tremor-script")," modules and libraries that can be included in your scripts and ",(0,i.kt)("inlineCode",{parentName:"p"},"trickle")," files via ",(0,i.kt)("inlineCode",{parentName:"p"},"use"),".  See ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-script/modules"},(0,i.kt)("inlineCode",{parentName:"a"},"tremor-script")," modules")," and ",(0,i.kt)("a",{parentName:"p",href:"/tremor-new-website/docs/tremor-query/modules"},(0,i.kt)("inlineCode",{parentName:"a"},"tremor-query")," modules"),". To adapt the places tremor is looking for your modules, append to the ",(0,i.kt)("inlineCode",{parentName:"p"},"TREMOR_PATH")," environment variable:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},'export TREMOR_PATH="/my/custom/tremor_modules:$TREMOR_PATH"\n')),(0,i.kt)("h2",{id:"static-or-bootstrap-deployments"},"Static or Bootstrap deployments"),(0,i.kt)("p",null,"Static or Bootstrap deployment allows tremor to be configured at startup with its registry and repository pre-populated with out of the box user defined configuration."),(0,i.kt)("p",null,"For example, in the following example, tremor is started with a registry and repository that runs a micro benchmark on startup"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"target/debug/tremor server run -f repo.yaml reg.yaml\n")),(0,i.kt)("p",null,"The repository:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'# File: repo.yaml\n\n# define a blaster that replays data from an archived JSON log file\nonramp:\n  - id: blaster\n    type: blaster\n    config:\n      source: ./demo/data/data.json.xz\n\n# define a blackhole that runs a 40 second benchmark and then stops\nofframp:\n  - id: blackhole\n    type: blackhole\n    config:\n      warmup_secs: 10\n      stop_after_secs: 40\n      significant_figures: 2\n\n# define a passthrough pipeline for benchmarking\npipeline:\n  - id: main\n    interface:\n      inputs:\n        - in\n      outputs:\n        - out\n    nodes:\n      - id: passthrough\n        op: passthrough\n    links:\n      in: [passthrough]\n      passthrough: [out]\n\n# define how blaster, the pipeline under test, and blackhole interconnect\nbinding:\n  - id: default\n    links:\n      "/onramp/blaster/{instance}/out": ["/pipeline/main/{instance}/in"]\n      "/pipeline/main/{instance}/out": ["/offramp/blackhole/{instance}/in"]\n')),(0,i.kt)("p",null,"Static deployments support multiple configurations. You can specify multiple configurations by using a list in the config instead of specifying one item as illustrated below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"onramp:\n  - id: kafka-in\n    type: kafka\n    codec: json\n    config:\n      brokers:\n        - kafka:9092\n      topics:\n        - demo\n      group_id: demo\n  - id: kafka-again\n    type: kafka\n    codec: json\n    config:\n      brokers:\n        - kafka:9092\n      topics:\n        - snotbadger\n      group_id: demo\n")),(0,i.kt)("p",null,"This file 'loads' the repository on startup with various specifications or templates, but it doesn't do anything. For that, we need to define one or many instances for tremor to deploy. This is done in the reg.yaml file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"mapping:\n  /binding/default/01: # deployment '01'\n    instance: \"01\" # .. deploys, blaster/01, blackhole/01, pipeline/main/01\n")),(0,i.kt)("h2",{id:"interactive-or-operational-deployments"},"Interactive or Operational deployments"),(0,i.kt)("p",null,"Tremor's registry and repository can be configured dynamically via tremor's REST API, and via the tremor-cli tool. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"tremor api onramp create blaster.yaml\ntremor api offramp create offramp.yaml\ntremor api pipeline create main.yaml\ntremor api binding create benchmark.yaml\n")),(0,i.kt)("p",null,"Or via curl:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"curl --data-binary @deployment.yaml http://localhost:9898/binding/default/01\n")))}m.isMDXComponent=!0}}]);