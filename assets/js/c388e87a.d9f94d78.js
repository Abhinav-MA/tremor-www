"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[9484],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?r.createElement(f,s(s({ref:t},c),{},{components:n})):r.createElement(f,s({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},23510:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),s=["components"],i={},l="path",u={unversionedId:"tremor-script/stdlib/std/path",id:"tremor-script/stdlib/std/path",isDocsHomePage:!1,title:"path",description:"The path module contains utility functions for path handling",source:"@site/docs/tremor-script/stdlib/std/path.md",sourceDirName:"tremor-script/stdlib/std",slug:"/tremor-script/stdlib/std/path",permalink:"/docs/next/tremor-script/stdlib/std/path",editUrl:"https://github.com/tremor-rs/tremor-www/tree/main/docs/tremor-script/stdlib/std/path.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"math",permalink:"/docs/next/tremor-script/stdlib/std/math"},next:{title:"random",permalink:"/docs/next/tremor-script/stdlib/std/random"}},c=[{value:"Functions",id:"functions",children:[{value:"try_default(base, segments, otherwise)",id:"try_defaultbase-segments-otherwise",children:[]}]}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"path"},"path"),(0,o.kt)("p",null,"The path module contains utility functions for path handling"),(0,o.kt)("h2",{id:"functions"},"Functions"),(0,o.kt)("h3",{id:"try_defaultbase-segments-otherwise"},"try_default(base, segments, otherwise)"),(0,o.kt)("p",null,"Determine if a base value matches an segment index array.\nReturns the value under the match on a hit.\nReturns a default user provided value on no match."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"base")," value can be a record, an array or the literal null."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"segments")," value should be an array where each field is used\nto traverse the ",(0,o.kt)("inlineCode",{parentName:"p"},"base")," value, as follows:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"String yielding expression segments used for field traversal"),(0,o.kt)("li",{parentName:"ul"},"Integer yielding expression segments used for array traversal"),(0,o.kt)("li",{parentName:"ul"},"A empty segment list yields is considered a match yielding the base value")),(0,o.kt)("p",null,"Examples"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tremor"},'use std::path;\n\n{"snot": "badger"} == path::try_default({"snot": "badger"}, [], "test")\n\n"flook" == path::try_default([{"snot": "badger"}, ["fleek", "flook"]], [1, 1], "test")\n\n"badger" == path::try_default([{"snot": "badger"}, ["fleek", "flook"]], [0, "snot"], "test")\n\n"fleek" == path::try_default([{"snot": "badger"}, ["fleek", "flook"]], [1, 0], "test")\n\n"test" == path::try_default([{"snot": "badger"}, ["fleek", "flook"]], [1, 2], "test")\n\n# Statements of the general form\nmatch event of\ncase %{ absent host } => let event.host = system::hostname()\ndefault => event.host\nend;\n\nCan now be written more tersely as:\n# If host is absent, default to the system hostname\nlet host = try_default(event, ["host"], system::hostname())\n')),(0,o.kt)("p",null,"Returns a tremor value"))}d.isMDXComponent=!0}}]);