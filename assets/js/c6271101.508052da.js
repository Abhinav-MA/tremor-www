"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[1426],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return v}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(n),v=i,f=d["".concat(o,".").concat(v)]||d[v]||c[v]||l;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function v(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,a=new Array(l);a[0]=d;var u={};for(var o in t)hasOwnProperty.call(t,o)&&(u[o]=t[o]);u.originalType=e,u.mdxType="string"==typeof e?e:i,a[1]=u;for(var s=2;s<l;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},89475:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},metadata:function(){return o},toc:function(){return s},default:function(){return c}});var r=n(87462),i=n(63366),l=(n(67294),n(3905)),a=["components"],u={},o={unversionedId:"tremor-script/stdlib/std/type",id:"tremor-script/stdlib/std/type",isDocsHomePage:!1,title:"type",description:"The type module contains functions that help inspecting types of values.",source:"@site/docs/tremor-script/stdlib/std/type.md",sourceDirName:"tremor-script/stdlib/std",slug:"/tremor-script/stdlib/std/type",permalink:"/docs/next/tremor-script/stdlib/std/type",editUrl:"https://github.com/tremor-rs/tremor-new-website/tree/main/docs/tremor-script/stdlib/std/type.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"test",permalink:"/docs/next/tremor-script/stdlib/std/test"},next:{title:"url",permalink:"/docs/next/tremor-script/stdlib/std/url"}},s=[{value:"Functions",id:"functions",children:[{value:"as_string(value)",id:"as_stringvalue",children:[]},{value:"is_null(value)",id:"is_nullvalue",children:[]},{value:"is_bool(value)",id:"is_boolvalue",children:[]},{value:"is_integer(value)",id:"is_integervalue",children:[]},{value:"is_float(value)",id:"is_floatvalue",children:[]},{value:"is_number(value)",id:"is_numbervalue",children:[]},{value:"is_string(value)",id:"is_stringvalue",children:[]},{value:"is_array(value)",id:"is_arrayvalue",children:[]},{value:"is_record(value)",id:"is_recordvalue",children:[]},{value:"is_binary(value)",id:"is_binaryvalue",children:[]}]}],p={toc:s};function c(e){var t=e.components,n=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The type module contains functions that help inspecting types of values."),(0,l.kt)("h2",{id:"functions"},"Functions"),(0,l.kt)("h3",{id:"as_stringvalue"},"as_string(value)"),(0,l.kt)("p",null,"Returns a string representation for the value type:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'"null"'),(0,l.kt)("li",{parentName:"ul"},'"bool"'),(0,l.kt)("li",{parentName:"ul"},'"integer"'),(0,l.kt)("li",{parentName:"ul"},'"float"'),(0,l.kt)("li",{parentName:"ul"},'"string"'),(0,l.kt)("li",{parentName:"ul"},'"array"'),(0,l.kt)("li",{parentName:"ul"},'"record"')),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"string")),(0,l.kt)("h3",{id:"is_nullvalue"},"is_null(value)"),(0,l.kt)("p",null,"Returns if the value is null."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("h3",{id:"is_boolvalue"},"is_bool(value)"),(0,l.kt)("p",null,"Returns if the value is a boolean."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("h3",{id:"is_integervalue"},"is_integer(value)"),(0,l.kt)("p",null,"Returns if the value is an integer."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("h3",{id:"is_floatvalue"},"is_float(value)"),(0,l.kt)("p",null,"Returns if the value is a float."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("h3",{id:"is_numbervalue"},"is_number(value)"),(0,l.kt)("p",null,"Returns if the value is either a float or an integer."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("h3",{id:"is_stringvalue"},"is_string(value)"),(0,l.kt)("p",null,"Returns if the value is a string."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("h3",{id:"is_arrayvalue"},"is_array(value)"),(0,l.kt)("p",null,"Returns if the value is an array."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("h3",{id:"is_recordvalue"},"is_record(value)"),(0,l.kt)("p",null,"Returns if the value is a record."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")),(0,l.kt)("h3",{id:"is_binaryvalue"},"is_binary(value)"),(0,l.kt)("p",null,"Returns if the value is a binary."),(0,l.kt)("p",null,"Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"bool")))}c.isMDXComponent=!0}}]);