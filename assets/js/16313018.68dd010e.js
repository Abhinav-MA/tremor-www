"use strict";(self.webpackChunknew_tremor_website=self.webpackChunknew_tremor_website||[]).push([[1665],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=o,f=m["".concat(c,".").concat(d)]||m[d]||l[d]||a;return r?n.createElement(f,i(i({ref:t},u),{},{components:r})):n.createElement(f,i({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1968:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={},c="Grok",p={unversionedId:"tremor-script/extractors/grok",id:"tremor-script/extractors/grok",isDocsHomePage:!1,title:"Grok",description:"The grok extractor is useful for parsing unstructured data into a structured form. It is based on logstash's grok plugin. Grok uses regular expressions, so any regular expression can be used as a grok pattern.",source:"@site/docs/tremor-script/extractors/grok.md",sourceDirName:"tremor-script/extractors",slug:"/tremor-script/extractors/grok",permalink:"/tremor-new-website/docs/tremor-script/extractors/grok",editUrl:"https://github.com/tremor-rs/tremor-new-website/tree/main/docs/tremor-script/extractors/grok.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Glob",permalink:"/tremor-new-website/docs/tremor-script/extractors/glob"},next:{title:"Influx",permalink:"/tremor-new-website/docs/tremor-script/extractors/influx"}},u=[{value:"Predicate",id:"predicate",children:[]},{value:"Extraction",id:"extraction",children:[]},{value:"Example",id:"example",children:[]}],l={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"grok"},"Grok"),(0,a.kt)("p",null,"The grok extractor is useful for parsing unstructured data into a structured form. It is based on logstash's grok plugin. Grok uses regular expressions, so any regular expression can be used as a grok pattern."),(0,a.kt)("p",null,"Grok pattern is of the form ",(0,a.kt)("inlineCode",{parentName:"p"},"%{SYNTAX : SEMANTIC}")," where ",(0,a.kt)("inlineCode",{parentName:"p"},"SYNTAX")," is the name of the pattern that matches the text and ",(0,a.kt)("inlineCode",{parentName:"p"},"SEMANTIC")," is the identifier"),(0,a.kt)("h2",{id:"predicate"},"Predicate"),(0,a.kt)("p",null,"When used with ",(0,a.kt)("inlineCode",{parentName:"p"},"~"),", the predicate passes if the target matches the pattern passed by the input (fetched from the grok pattern's file)."),(0,a.kt)("h2",{id:"extraction"},"Extraction"),(0,a.kt)("p",null,"If the predicate passes, the extractor returns the matches found when the target was matched to the pattern."),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tremor"},'match { "meta": "55.3.244.1 GET /index.html 15824 0.043" } of\n  case rp = %{ meta ~= grok |%{IP:client} %{WORD:method} %{URIPATHPARAM:request} %{NUMBER:bytes} %{NUMBER:duration} | } => rp\n  default => "no match"\nend;\n')))}m.isMDXComponent=!0}}]);